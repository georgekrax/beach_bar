"""Represents a user's account"""
type Account {
  address: String
  age: Int
  birthday: DateTime
  city: String
  country: Country
  honorificTitle: String
  id: ID!
  imgUrl: String
  phoneNumber: String
  telCountry: Country
  trackHistory: Boolean!
  user: User!
  zipCode: String
}

"""Info to be returned when a payment is created (made)"""
type AddPayment {
  """
  A boolean that indicates if the payments have been successfully created (made)
  """
  added: Boolean!

  """The payment that is created (made)"""
  payment: Payment!
}

union AddPaymentResult = AddPayment | Error

"""
Info to be returned when a product is marked (added) as a reserved one from a payment
"""
type AddReservedProduct {
  """
  A boolean that indicates if the product has been successfully marked as a reserved one
  """
  added: Boolean!

  """The product that is marked as a reserved one"""
  reservedProduct: ReservedProduct!
}

union AddReservedProductResult = AddReservedProduct | Error

"""
Info to be returned, when checking if a #beach_bar product is available
"""
type AvailableProduct {
  """The hour, to check if available"""
  hourTime: HourTime!

  """A boolean that indicates if the product is available in the hour time"""
  isAvailable: Boolean!
}

"""Represents a #beach_bar"""
type BeachBar {
  avgRating: Float!
  category: BeachBarCategory!
  closingTime: HourTime!
  contactPhoneNumber: String!
  currency: Currency!
  description: String
  displayRegardlessCapacity: Boolean!
  entryFee: Decimal
  features: [BeachBarFeature!]!
  foods: [Food!]!
  hasCompletedSignUp: Boolean
  hidePhoneNumber: Boolean!
  id: ID!
  imgUrls: [BeachBarImgUrl!]!
  isActive: Boolean!
  location: BeachBarLocation!
  name: String!
  openingTime: HourTime!
  owners: [BeachBarOwner!]!

  """A list with all the payments of a #beach_bar"""
  payments: [Payment!]!
  products: [Product!]!
  restaurants: [BeachBarRestaurant!]!
  reviews: [BeachBarReview!]!
  slug: String!
  styles: [BeachBarStyle!]!
  thumbnailUrl: String
  timestamp: DateTime!
  updatedAt: DateTime!
  zeroCartTotal: Boolean!
}

"""Represents a #beach_bar's category"""
type BeachBarCategory {
  description: String
  id: ID!
  name: String!
}

"""Represents a #beach_bar's feature (service) & its details"""
type BeachBarFeature {
  beachBar: BeachBar!
  description: String
  id: BigInt!
  quantity: Int!
  service: BeachBarService!
  timestamp: DateTime!
  updatedAt: DateTime!
}

"""Represents a #beach_bar's image (URL value)"""
type BeachBarImgUrl {
  beachBar: BeachBar!
  description: String
  id: BigInt!
  imgUrl: String!
  timestamp: DateTime!
  updatedAt: DateTime!
}

"""Represents a #beach_bar's location details"""
type BeachBarLocation {
  address: String!
  city: City!
  country: Country!

  """Get the location of the #beach_bar formatted"""
  formattedLocation: String!
  id: ID!
  latitude: Decimal!
  longitude: Decimal!
  region: Region

  """
  The 'point' value generated from latitude & longitude, provided by the PostGIS PostgreSQL extension
  """
  whereIs: [Float!]
  zipCode: String
}

"""Represents a #beach_bar's owner"""
type BeachBarOwner {
  beachBar: BeachBar!
  id: ID!
  isPrimary: Boolean!
  owner: Owner!
  publicInfo: Boolean
  timestamp: DateTime!
}

"""Represents a #beach_bar's restaurant"""
type BeachBarRestaurant {
  beachBar: BeachBar!
  description: String
  foodItems: [RestaurantFoodItem!]!
  id: ID!
  isActive: Boolean!
  name: String!
}

"""Represents a #beach_bar's review, by a customer"""
type BeachBarReview {
  answer: String
  beachBar: BeachBar!
  body: String
  customer: Customer!
  id: ID!
  month: MonthTime
  negativeComment: String
  payment: Payment!
  positiveComment: String
  ratingValue: Int!
  timestamp: DateTime!
  updatedAt: DateTime!
  visitType: ReviewVisitType
  votes: [ReviewVote!]!
}

"""Represents a service (feature), which a #beach_bar can provide"""
type BeachBarService {
  icon: Icon!
  id: ID!
  name: String!
}

"""The style of a #beach_bar"""
type BeachBarStyle {
  id: ID!
  name: String!
}

"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
@see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt
"""
scalar BigInt

"""The `Byte` scalar type represents byte value as a Buffer"""
scalar Bytes

"""Represents a customer's credit or debit card"""
type Card {
  brand: CardBrand
  cardholderName: String!
  country: Country
  customer: Customer!
  expMonth: Int
  expYear: Int
  id: BigInt!
  isDefault: Boolean!
  last4: String!
  stripeId: String!
  type: String!
}

"""Represents the brand of a credit or debit card"""
type CardBrand {
  id: ID!
  name: String!
}

"""Represents a shopping cart"""
type Cart {
  foods(beachBarId: ID): [CartFood!]!
  foodsTotal: Decimal!
  id: BigInt!
  notes(beachBarId: ID): [CartNote!]!
  products(beachBarId: ID): [CartProduct!]!
  productstotal: Decimal!
  total: Decimal!
  user: User
}

"""Represents a food listed in a shoppingcart"""
type CartFood {
  cart: Cart!
  date: DateTime
  deletedAt: DateTime
  food: Food!
  id: BigInt!
  quantity: Int!
  timestamp: DateTime!
  total: Float
  updatedAt: DateTime!
}

"""
Represents a note of the user, added in its shopping cart, for the #beach_bar(s), it is going to visit
"""
type CartNote {
  beachBar: BeachBar!
  body: String!
  cart: Cart!
  id: BigInt!
  timestamp: DateTime!
}

"""Represents a shopping cart with its products"""
type CartProduct {
  cart: Cart!
  date: DateTime!
  endTime: HourTime!
  id: BigInt!
  people: Int!
  product: Product!
  quantity: Int!
  startTime: HourTime!
  timestamp: DateTime!
  total: Float
}

"""Represents an object with an array of cities and regions"""
type CitiesAndRegions {
  cities: [City!]!
  regions: [Region!]!
}

"""Represents a city of a country"""
type City {
  country: Country!
  id: ID!
  name: String!
}

"""Represents a country"""
type Country {
  alpha2Code: String!
  alpha3Code: String!
  callingCode: String!
  cities: [City!]!
  currency: Currency!
  id: ID!
  isEu: Boolean!
  name: String!
}

"""Represents a currency"""
type Currency {
  id: ID!
  isoCode: String!
  name: String!
  secondSymbol: String
  symbol: String!
}

"""Represents a customer"""
type Customer {
  cards: [Card!]!
  country: Country
  email: String
  id: BigInt!
  phoneNumber: String
  user: User
}

"""Revenue and number of successful payments of a #beach_bar"""
type DashboardBalance {
  """Today's gross volume of each operating hour"""
  grossVolume: [DashboardDateValue!]!
  revenue: Float!
  successfulPayments: [Payment!]!
}

"""Data fetched for the dashboard billing page"""
type DashboardBilling {
  """Average foods purchased per payment"""
  avgFoods: [DashboardDateValue!]!

  """Average product booked per payment"""
  avgProducts: [DashboardDateValue!]!
  customersCountries: [DashboardBillingCustomerCountries!]!
  foods: DashboardBillingFoods!
  products: DashboardBillingProducts!
  refundedPayments: [DashboardBillingRefundedPayments!]!
}

type DashboardBillingCustomerCountries {
  country: Country!
  value: Int!
}

interface DashboardBillingField {
  revenue: [DashboardDateValue!]!
}

"""
Foods revenue, difference from the yesterday, average foods per payment
"""
type DashboardBillingFoods implements DashboardBillingField {
  mostCommon: [DashboardBillingMostCommonFoods!]!
  revenue: [DashboardDateValue!]!
}

type DashboardBillingMostCommonFoods {
  food: Food!
  timesPurchased: Int!
}

type DashboardBillingMostCommonProducts {
  product: Product!
  timesBooked: Int!
}

"""
Products revenue, difference from the yesterday, average products per payment
"""
type DashboardBillingProducts implements DashboardBillingField {
  mostCommon: [DashboardBillingMostCommonProducts!]!
  revenue: [DashboardDateValue!]!
}

type DashboardBillingRefundedPayments {
  date: Date!
  payments: [Payment!]!
}

"""Data fetched for the dashboard bookings page"""
type DashboardBookings {
  bookings: [Payment!]!
  capacity: DashboardBookingsCapacity!
  mostActive: DashboardMostActive!
}

"""Capacity percentage of customers and number of products booked"""
type DashboardBookingsCapacity {
  arr: [DashboardCapacityPercentage!]!
  maxCapacity: [DashboardMaxCapacity!]!
  totalCustomers: [DashboardDateValue!]!
  totalHourCustomers: [DashboardDateValue!]!
}

"""Capacity percentage of customers and number of products booked"""
type DashboardCapacity {
  availableProducts: Int!
  percentage: Float!
  reservedProducts: Int!
  totalHourCustomers: Int!
  totalMaxPeopleCapacity: Int!
}

type DashboardCapacityPercentage {
  date: Date!
  percentage: Float!
}

type DashboardDateValue {
  date: DateTime!
  value: Float!
}

"""The arguments to fetch data for a specific time period"""
input DashboardDatesArg {
  end: DateTime
  start: DateTime
}

"""Data (of the day) fetched for a #beach_bar's dashboard homepage"""
type DashboardHomePage {
  avgRating: [DashboardDateValue!]!
  avgSpendPerPerson: [DashboardDateValue!]!
  balance: DashboardBalance!
  capacity: DashboardCapacity!
  grossVolume: [DashboardDateValue!]!
  newCustomers: [DashboardNewCustomers!]!
  totalCustomers: [DashboardDateValue!]!
}

type DashboardMaxCapacity {
  availableProducts: Int!
  date: Date!
  limitPeople: Int!
}

type DashboardMostActive {
  hour: Int!
  weekDay: String!
}

"""The new customers of a #beach_bar on a specific date"""
type DashboardNewCustomers {
  customers: [Customer!]!
  date: Date!
}

"""Use JavaScript Date object for date-only fields."""
scalar Date

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""An arbitrary-precision Decimal type"""
scalar Decimal

"""
A field whose value conforms to the standard internet email address format as specified in RFC822: https://www.w3.org/Protocols/rfc822/.
"""
scalar Email

"""Represents a formatted error"""
type Error {
  """
  Returns an error in a type of string, if there is one, with a status and a message
  """
  error: ErrorObject
}

"""Represents an error object"""
type ErrorObject {
  """
  The error code of the operation, it can be found in a list in the documentation
  """
  code: String

  """A short description for the error occurred"""
  message: String
}

"""Represents a user's uploaded file"""
type File {
  """A string representing the file encoding, such as 7bit"""
  encoding: String!

  """A string representing the name of the uploaded file"""
  filename: String!

  """
  A string representing the MIME type of the uploaded file, such as image/jpeg
  """
  mimetype: String!
}

"""Represents a food item - product of a #beach_bar"""
type Food {
  beachBar: BeachBar!
  category: FoodCategory!
  deletedAt: DateTime
  id: BigInt!
  ingredients: String
  maxQuantity: Int!
  name: String!
  price: Decimal!
  timestamp: DateTime!
  updatedAt: DateTime!
}

"""Represents a category of a food a #beach_bar provides"""
type FoodCategory {
  icon: Icon!
  id: ID!
  name: String!
}

"""Represents each hour of the day"""
type HourTime {
  id: ID!
  utcValue: Time!
  value: Int!
}

"""
A field whose value is a IPv4 address: https://en.wikipedia.org/wiki/IPv4.
"""
scalar IPv4

"""Represents a SVG icon to be used in the front-end"""
type Icon {
  id: ID!
  name: String!
  publicId: String!
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar Json

"""User info to be returned on login"""
type LoginAuthorize {
  """The access token to authenticate & authorize the user"""
  accessToken: String!

  """
  A boolean that indicates if the user has also signed up, because it is a new one
  """
  isNewUser: Boolean!

  """The access token to authenticate & authorize the user"""
  refreshToken: String!

  """A list of the user scopes"""
  scope: [String!]!

  """The user (object) that logins"""
  user: User!
}

"""Represents each month of the year"""
type MonthTime {
  days: Int!
  id: ID!
  value: String!
}

"""Mutation"""
type Mutation {
  """Add (register) a new #beach_bar to the platform"""
  addBeachBar(
    """The ID value of the category of the #beach_bar"""
    categoryId: ID!

    """
    The ID value of the closing quarter time of the #beach_bar, in its country time zone
    """
    closingTimeId: ID!

    """The response code from Stripe.com"""
    code: String!

    """A phone number to contact the #beach_bar directly"""
    contactPhoneNumber: String!

    """A description of the #beach_bar"""
    description: String

    """
    A boolean that indicates if to NOT display the phone number when retrieving #beach_bar info. Its default value is set to false
    """
    hidePhoneNumber: Boolean = false

    """
    The name to register the #beach_bar. It should be unique among other ones
    """
    name: String!

    """
    The ID value of the opening quarter time of the #beach_bar, in its country time zone
    """
    openingTimeId: ID!

    """The response state, to check if everything went correct"""
    state: String!

    """
    A thumbnail URL value of the #beach_bar's image to show in search results
    """
    thumbnailUrl: URL

    """
    Set to true if the #beach_bar accepts for a customer / user to have less than the #beach_bar minimum currency price
    """
    zeroCartTotal: Boolean!
  ): BeachBar!

  """Add (assign) a feature to a #beach_bar."""
  addBeachBarFeature(
    beachBarId: ID!

    """A short description about the service"""
    description: String
    featureId: ID!

    """
    An integer that indicates the quantity of the service, a #beach_bar provides
    """
    quantity: Int! = 1
  ): BeachBarFeature!

  """Add an image (URL) to a #beach_bar"""
  addBeachBarImgUrl(
    beachBarId: ID!

    """
    A short description about what the image represents. The characters of the description should not exceed the number 175
    """
    description: String

    """The URL value of the image"""
    imgUrl: URL!
  ): BeachBarImgUrl!

  """Add (assign) a location to a #beach_bar"""
  addBeachBarLocation(
    """The address of the #beach_bar"""
    address: String!
    beachBarId: ID!

    """The city the #beach_bar is located at"""
    city: String!

    """The ID value of the country the #beach_bar is located at"""
    countryId: ID!

    """The latitude of the location of the #beach_bar"""
    latitude: String!

    """The longitude of the location of the #beach_bar"""
    longitude: String!

    """The #beach_bar's region"""
    region: ID

    """The zip (postal) code of the #beach_bar"""
    zipCode: String
  ): BeachBarLocation!

  """
  Add (assign) another owner to a #beach_bar too. Only available for the primary owner of a #beach_bar
  """
  addBeachBarOwner(
    """The ID value of the #beach_bar the owner will be added (assigned) to"""
    beachBarId: ID!

    """
    Set to true if the user will become the or one of the primary owners of the #beach_bar. It is set to false by default
    """
    isPrimary: Boolean = false

    """
    The user to add (assign) to the #beach_bar, to become one of its owners
    """
    userId: ID
  ): BeachBarOwner!

  """Add a restaurant of a #beach_bar"""
  addBeachBarRestaurant(
    beachBarId: ID!

    """A short description, info text, about the restaurant itself"""
    description: String

    """
    A boolean that indicates if the restaurant is active or not. Its default value is false
    """
    isActive: Boolean = false

    """The name of the restaurant"""
    name: String!
  ): BeachBarRestaurant!

  """Add (assign) styles to a #beach_bar"""
  addBeachBarStyles(beachBarId: ID!, styleIds: [ID!]!): [BeachBarStyle!]!

  """Add a food to a shopping cart"""
  addCartFood(
    """The ID value of the shopping cart"""
    cartId: ID!

    """The ID value of the food to add"""
    foodId: ID!

    """
    The number that indicates how many times to add the food to the cart. Its default value is 1
    """
    quantity: Int
  ): CartFood!

  """Add a note to a shopping cart's #beach_bar"""
  addCartNote(
    """The ID value of the #beach_bar"""
    beachBarId: ID!

    """The text - content of the note for the #beach_bar"""
    body: String!

    """The ID value of the shopping cart"""
    cartId: ID!
  ): CartNote!

  """Add a product to a shopping cart"""
  addCartProduct(
    """The ID value of the shopping cart"""
    cartId: ID!

    """
    The date to purchase the product. Its default value its the current date
    """
    date: Date!

    """The ID value of the ending hour time of product use"""
    endTimeId: ID!

    """The number of people that are going to use the product"""
    people: Int!

    """The ID value of the product to add"""
    productId: ID!

    """
    The number that indicates how many times to add the product to the cart. Its default value is 1
    """
    quantity: Int

    """The ID value of the starting hour time of product use"""
    startTimeId: ID!
  ): CartProduct!

  """Add a payment method (credit / debit card) to a customer"""
  addCustomerPaymentMethod(
    """The (full) name of the cardholder of the card registered"""
    cardholderName: String!

    """The ID value of the registered customer"""
    customerId: ID

    """
    A boolean that indicates if the card registered is the default one for the customer, to use in its transactions. Its default value is false
    """
    isDefault: Boolean = false

    """
    A boolean that indicates if the card should be saved for future payments. Defaults to true
    """
    savedForFuture: Boolean = true

    """
    A token returned by Stripe (Stripe.js & Elements), which will automatically validate the card
    """
    source: String!
  ): Card!

  """Add a food to a #beach_bar"""
  addFood(
    beachBarId: ID!

    """The ID value of the category of the food"""
    categoryId: ID!

    """The ingredients used to create the food"""
    ingredients: String

    """The maximum number a user can buy a specific food"""
    maxQuantity: Int

    """The name of the food"""
    name: String!

    """The price of the food"""
    price: Float!
  ): Food!

  """Add a product to a #beach_bar"""
  addProduct(
    beachBarId: ID!

    """The ID value of the category of the product"""
    categoryId: ID!

    """A short description of the product"""
    description: String

    """An image for the #beach_bar's product"""
    imgUrl: URL

    """
    A boolean that indicates if the product is active & can be purchased by a user or a customer
    """
    isActive: Boolean = false

    """How many people can use this specific product"""
    maxPeople: Int!

    """
    The minimum amount of money spent to food for the user(s) of this purchased product
    """
    minFoodSpending: Float

    """The name of the product"""
    name: String!

    """The price of the product"""
    price: Float!
  ): Product!

  """Add a reservation limit to a #beach_bar product"""
  addProductReservationLimit(
    """
    The ID value of the hour time from when this limit is terminated (is not applicable anymore)
    """
    endTimeId: ID

    """The starting date this limit is applicable for"""
    from: Date!

    """
    The number to add as a limit a #beach_bar can provide the product, for specific date(s)
    """
    limit: Int!

    """The ID value of the product to add this reservation limit"""
    productId: ID!

    """The ID value of the hour time from when this limit is applicable"""
    startTimeId: ID

    """The ending date this limit is applicable for"""
    to: Date!
  ): ProductReservationLimit!

  """Add a food item to a #beach_bar restaurant"""
  addRestaurantFoodItem(
    """An image representing the food item product"""
    imgUrl: URL

    """
    The ID value of the category of the gastronomic menu, the food item is assigned to
    """
    menuCategoryId: Int!

    """The name of the food item"""
    name: String!

    """The price of the food item in the menu catalogue"""
    price: Float!
    restaurantId: ID!
  ): RestaurantFoodItem!

  """Add a customer's review on a #beach_bar"""
  addReview(
    beachBarId: ID!

    """The main body (description) of the user's review"""
    body: String
    monthId: ID

    """A negative comment about the #beach_bar"""
    negativeComment: String

    """The referral code of the payment, to find"""
    paymentRefCode: String

    """A positive comment about the #beach_bar"""
    positiveComment: String

    """The rating value between 1 to 10, the customers rates the #beach_bar"""
    ratingValue: Int!
    visitTypeId: ID
  ): BeachBarReview!
  authorize(
    """Set to true if you want to sign up an owner for a #beach_bar"""
    isPrimaryOwner: Boolean = false

    """User details in login"""
    loginDetails: UserLoginDetails
    provider: OAuthProvider!
    user: OAuthUserInput!
  ): LoginAuthorize!

  """Authorize a user with Facebook"""
  authorizeWithFacebook(
    """The response code from Google's OAuth callback"""
    code: String!

    """Set to true if you want to sign up an owner for a #beach_bar"""
    isPrimaryOwner: Boolean = false

    """User details in login"""
    loginDetails: UserLoginDetails

    """The response state, to check if everything went correct"""
    state: String!
  ): LoginAuthorize!

  """Authorize a user with Google"""
  authorizeWithGoogle(
    """The response code from Google's OAuth callback"""
    code: String!

    """Set to true if you want to sign up an owner for a #beach_bar"""
    isPrimaryOwner: Boolean = false

    """User details in login"""
    loginDetails: UserLoginDetails

    """The response state, to check if everything went correct"""
    state: String!
  ): LoginAuthorize!

  """Authorize a user with Instagram"""
  authorizeWithInstagram(
    """The response code from Google's OAuth callback"""
    code: String!

    """Email address of user to authorize with Instagram"""
    email: Email!

    """Set to true if you want to sign up an owner for a #beach_bar"""
    isPrimaryOwner: Boolean = false

    """User details in login"""
    loginDetails: UserLoginDetails

    """The response state, to check if everything went correct"""
    state: String!
  ): LoginAuthorize!
  cacheBeachBars: Boolean!

  """Change a user's password"""
  changeUserPassword(
    """Email of user to retrieve OAuth Client applications"""
    email: Email!

    """User's new password"""
    newPassword: String!

    """
    The token in the URL to identify and verify user. Each key lasts 20 minutes
    """
    token: String!
  ): Boolean!

  """Make a payment using a customer's shopping cart"""
  checkout(
    """The ID value of the credit or debit card of the customer"""
    cardId: ID!

    """The ID value of the shopping cart with the products to purchase"""
    cartId: ID!

    """
    A coupon or offer campaign code to make a discount to the payment's price
    """
    voucherCode: String
  ): Payment!

  """Event fired when a #beach_bar has completed the sign up process"""
  completeBeachBarSignUp(beachBarId: ID!): Boolean!

  """Delete (remove) a #beach_bar from the platform"""
  deleteBeachBar(id: ID!): Boolean!

  """Delete (remove) a feature (service) from a #beach_bar."""
  deleteBeachBarFeature(id: ID!): Boolean!

  """Delete an image (URL) from a #beach_bar"""
  deleteBeachBarImgUrl(id: ID!): Boolean!

  """Delete (remove) an owner from a #beach_bar"""
  deleteBeachBarOwner(beachBarId: ID!, ownerId: ID!): Boolean!

  """Delete (remove) a restaurant from a #beach_bar"""
  deleteBeachBarRestaurant(id: ID!): Boolean!

  """Delete (remove) styles from a #beach_bar"""
  deleteBeachBarStyles(beachBarId: ID!, styleIds: [ID!]!): Boolean!

  """
  Delete a cart after a transaction. This mutation is also called if the user is not authenticated & closes the browser tab
  """
  deleteCart(cartId: ID!): Boolean!

  """Delete (remove) a food from a shopping cart"""
  deleteCartFood(id: ID!): Boolean!

  """Delete (remove) a product from a shopping cart"""
  deleteCartProduct(id: ID!): Boolean!

  """Delete (remove) a customer"""
  deleteCustomer(customerId: ID): Boolean!

  """Delete (remove) a payment method (credit / debit card) from a customer"""
  deleteCustomerPaymentMethod(cardId: ID!): Boolean!

  """Delete (remove) a food from a #beach_bar"""
  deleteFood(foodId: ID!): Boolean!

  """Delete (remove) a product from a #beach_bar"""
  deleteProduct(productId: ID!): Boolean!

  """Delete a or some reservation limit(s) from a #beach_bar's product"""
  deleteProductReservationLimit(id: ID!): Boolean!

  """Delete (remove) a food item from a #beach_bar's restaurant"""
  deleteRestaurantFoodItem(id: ID!): Boolean!

  """Delete a customer's review on a #beach_bar"""
  deleteReview(id: ID!): Boolean!

  """Remove a #beach_bar from a user's favorites list"""
  deleteUserFavoriteBar(
    """The ID value of the #beach_bar, to add to the user's favorites list"""
    beachBarId: ID!
  ): Boolean! @deprecated(reason: "You should use the `updateUserFavoriteBar` mutation operation, which handles automatically the creation and removement of a user's #beach_bar")

  """Sample mutation"""
  hello(name: String): String!

  """Login a user"""
  login(
    """User details"""
    loginDetails: UserLoginDetails

    """Credential for signing up a user"""
    userCredentials: UserCredentials!
  ): LoginAuthorize!

  """Logout a user"""
  logout: Boolean!

  """Refund a payment"""
  refundPayment(
    """The ID of the payment to refund"""
    id: ID!
  ): Boolean!

  """Restore a (soft) deleted #beach_bar product"""
  restoreBeachBarProduct(productId: ID!): Product!

  """Sends a link to the user's email address to change its password"""
  sendForgotPasswordLink(
    """The email address of user"""
    email: Email!
  ): Boolean!

  """Sign the S3 URL for an object"""
  signS3(
    """The name of the file to sign (upload)"""
    filename: String!

    """The type of the file to sign (upload)"""
    filetype: String!

    """The name of bucket in AWS S3"""
    s3Bucket: String!
  ): S3Payload!

  """Sign up a user"""
  signUp(
    """Wether to sign up an owner for a #beach_bar"""
    isPrimaryOwner: Boolean = false

    """Credential for signing up a user"""
    userCredentials: UserCredentials!
  ): User!

  """Update the details of a #beach_bar's image"""
  updateBeachBaImgUrl(description: String, id: ID!): BeachBarImgUrl!

  """Update a #beach_bar details"""
  updateBeachBar(categoryId: ID, closingTimeId: ID, contactPhoneNumber: String, description: String, displayRegardlessCapacity: Boolean, hidePhoneNumber: Boolean, id: ID!, isActive: Boolean, name: String, openingTimeId: ID, thumbnailUrl: URL, zeroCartTotal: Boolean): BeachBar!

  """Update a feature of a #beach_bar."""
  updateBeachBarFeature(description: String, id: ID!, quantity: Int): BeachBarFeature!

  """Update the location details of a #beach_bar"""
  updateBeachBarLocation(address: String, city: String, countryId: ID, latitude: String, locationId: ID!, longitude: String, region: String, zipCode: String): BeachBarLocation!

  """Update a #beach_bar's owner info"""
  updateBeachBarOwner(beachBarId: ID!, isPrimary: Boolean = false, ownerId: ID!, publicInfo: Boolean): BeachBarOwner!

  """Update the restaurant details of a #beach_bar"""
  updateBeachBarRestaurant(description: String, isActive: Boolean, name: String, restaurantId: ID!): BeachBarRestaurant!

  """Update the quantity of a food in a shopping cart"""
  updateCartFood(id: ID!, quantity: Int!): CartFood!

  """Update the body of a shopping's cart note"""
  updateCartNote(body: String!, id: ID!): CartNote!

  """Update the quantity of a product in a shopping cart"""
  updateCartProduct(id: ID!, quantity: Int): CartProduct!

  """Update a customer's details"""
  updateCustomer(
    """The ISO code of the country of customer's telephone"""
    countryIsoCode: String

    """The ID value of the customer"""
    customerId: ID!

    """The phone number of the customer"""
    phoneNumber: String
  ): Customer!

  """Update the details of customer's card"""
  updateCustomerPaymentMethod(
    """The ID of the card to update"""
    cardId: ID!

    """The (full) name of the cardholder of the card"""
    cardholderName: String

    """The expiration month of the card"""
    expMonth: Int

    """The expiration year of the card"""
    expYear: Int

    """
    A boolean that indicates if the card is the default one for the customer, to use in its transactions
    """
    isDefault: Boolean
  ): Card!

  """Update a user's #beach_bar favourites list"""
  updateFavouriteBeachBar(
    """
    The slug of the #beach_bar, to add / remove from the user's favourites list
    """
    slug: ID!
  ): UserFavoriteBar!

  """Update a #beach_bar's food info"""
  updateFood(
    """The ID value of the category of the food"""
    categoryId: ID
    id: ID!

    """The ingredients used to create the food"""
    ingredients: String

    """The maximum number a user can buy a specific food"""
    maxQuantity: Int

    """The name of the food"""
    name: String

    """The price of the food"""
    price: Float
  ): Food!

  """Update a #beach_bar's product info"""
  updateProduct(
    """The ID value of the category of the product"""
    categoryId: ID

    """A short description of the product"""
    description: String

    """An image for the #beach_bar's product"""
    imgUrl: URL

    """
    A boolean that indicates if the product is active & can be purchased by a user or a customer
    """
    isActive: Boolean

    """How many people can use this specific product"""
    maxPeople: Int

    """
    The minimum amount of money spent to food for the user(s) of this purchased product
    """
    minFoodSpending: Float

    """The name of the product"""
    name: String

    """The price of the product"""
    price: Float
    productId: ID!
  ): Product!

  """Update a #beach_bar's product reservation limit"""
  updateProductReservationLimit(id: ID!, limit: Int): ProductReservationLimit!

  """Update a #beach_bar's restaurant food item details"""
  updateRestaurantFoodItem(foodItemId: ID!, imgUrl: URL, menuCategoryId: ID, name: String, price: Float): RestaurantFoodItem!

  """Update a customer's review on a #beach_bar"""
  updateReview(
    answer: String

    """The main body (description) of the user's review"""
    body: String
    id: ID!
    monthId: ID

    """A negative comment about the #beach_bar"""
    negativeComment: String

    """A positive comment about the #beach_bar"""
    positiveComment: String

    """The rating value between 1 to 10, the customers rates the #beach_bar"""
    ratingValue: Int
    visitTypeId: ID
  ): BeachBarReview!

  """Upvote or downvote a customer's review on a #beach_bar"""
  updateReviewVote(
    """Set to true if to decrement the review's votes"""
    downvote: Boolean

    """The ID value of the customer's review"""
    reviewId: ID!

    """Set to true if to increment the review's votes"""
    upvote: Boolean
  ): BeachBarReview!

  """Update a previous user's search"""
  updateSearch(
    """
    A list with the filter IDs to add in the search, found in the documentation
    """
    filterIds: [String!]

    """The ID value of a previous user search"""
    searchId: ID!
  ): UserSearch!

  """Update a user's info"""
  updateUser(
    """User's house or office street address"""
    address: String

    """User's birthday in the date format"""
    birthday: String

    """The city or hometown of user"""
    city: String

    """The country of user"""
    countryId: ID
    email: Email
    firstName: String

    """The honorific title of the user"""
    honorificTitle: String
    imgUrl: URL
    lastName: String

    """The phone number of user"""
    phoneNumber: String

    """The country of user's phone number"""
    telCountryId: ID

    """Indicates if to track user's history"""
    trackHistory: Boolean

    """User's house or office zip code"""
    zipCode: String
  ): User!

  """Upload a single file"""
  uploadSingleFile(
    """The file to upload"""
    file: Upload!
  ): File

  """Verify a user's payment to submit review"""
  verifyUserPaymentForReview(
    beachBarId: ID!

    """The referral code of the customer payment, to find"""
    refCode: String
  ): Boolean!
}

enum OAuthProvider {
  Facebook
  GitHub
  Google
  Hashtag
  Instagram
}

"""User details in when authorizing with an OAuth Provider"""
input OAuthUserInput {
  birthday: Date
  email: Email!
  firstName: String
  id: ID!
  imgUrl: URL
  lastName: String
  username: String
}

"""Represents a user that is an owner of a #beach_bar"""
type Owner {
  id: ID!
  user: User!
}

"""Represents a payment"""
type Payment {
  appFee: Decimal!
  card: Card!
  cart: Cart!
  deletedAt: DateTime
  id: BigInt!
  isRefunded: Boolean!
  refCode: String!
  reservedProducts: [ReservedProduct!]!
  status: PaymentStatus!
  stripeId: String!
  stripeProccessingFee: Decimal!
  timestamp: DateTime!
  total(beachBarId: ID): Float
}

"""Represents the status of a payment"""
type PaymentStatus {
  id: ID!
  name: String!
}

"""Represents a payment as a user's visit"""
type PaymentVisits {
  beachBar: BeachBar!
  visits: [Visit!]!
}

"""Represents a user's payment visit month and years list"""
type PaymentVisitsDates {
  month: MonthTime!
  year: Int!
}

"""Represents a product of a #beach_bar"""
type Product {
  beachBar: BeachBar!
  category: ProductCategory!
  deletedAt: DateTime
  description: String
  id: ID!
  imgUrl: String
  isActive: Boolean!
  isIndividual: Boolean!
  maxPeople: Int!
  minFoodSpending: Float
  name: String!
  price: Float!
  reservationLimits: [ProductReservationLimit!]!
  updatedAt: DateTime!
}

"""
Represents a product of a #beach_bar, and info about it's rest availability quantity
"""
type ProductAvailability {
  product: Product!

  """How many other's products of this type are available for purchase"""
  quantity: Int!
}

"""
The info to be returned when checking for a #beach_bar product's availability hour times
"""
type ProductAvailabilityHour {
  """The hour time of a day"""
  hourTime: HourTime!
  isAvailable: Boolean!
}

"""Represents a #beach_bar's product category"""
type ProductCategory {
  components: [ProductCategoryComponent!]!
  description: String
  id: ID!
  name: String!
  underscoredName: String!
}

"""
Represents a component of a product category, including the quantity that each category has.
"""
type ProductCategoryComponent {
  category: ProductCategory!
  component: ProductComponent!
  quantity: Int!
}

"""Represents a component of a product. For example a sunbed."""
type ProductComponent {
  icon: Icon!
  id: ID!
  name: String!
}

"""
Represents a recommended product of a #beach_bar, depending on a user's search
"""
type ProductRecommended {
  product: Product!

  """How many other's products of this type to purchase"""
  quantity: Int!
}

"""
Represents a the limit number, on how many times a product can be provided by a #beach_bar on a specific date
"""
type ProductReservationLimit {
  endTime: HourTime
  from: DateTime!
  id: BigInt!
  limitNumber: Int!
  product: Product!
  startTime: HourTime
  to: DateTime!
}

"""Represents each quarter of the day"""
type QuarterTime {
  id: ID!
  utcValue: Time!
  value: DateTime!
}

"""Query"""
type Query {
  accessToken: String!
  account: Account
  accountLink(id: ID!): String!

  """
  Fetch the other available hours a #beach_bar is available during that time
  """
  availableHours(beachBarId: ID!, date: Date!): [HourTime!]!

  """
  Fetch the available product of a #beach_bar for a date and a time period
  """
  availableProducts(
    """
    Arguments to search against #beach_bar's availability. If provided, the #beach_bar's products will only be the available ones for the specified data and time
    """
    availability: SearchInput
    beachBarId: ID!
  ): [Product!]!

  """Get the details of a #beach_bar"""
  beachBar(
    id: ID
    slug: String

    """
    Indicates if to retrieve information for user search. Its default value is set to true
    """
    userVisit: Boolean = true
  ): BeachBar

  """Get the images of a #beach_bar"""
  beachBarImgs(slug: String!): [BeachBarImgUrl!]

  """Get the latest cart of an authenticated user or create one"""
  cart(
    """The ID value of the shopping cart, if it is created previously"""
    cartId: ID
  ): Cart!
  cartEntryFees(
    beachBarId: ID

    """The ID values of the shopping cart"""
    cartId: ID!
  ): Float!

  """Fetch all the cities of #beach_bar's locations"""
  citiesAndRegions: CitiesAndRegions!

  """
  Get or create a customer, depending on current authenticated or not user
  """
  customer(
    """The ID value of the country of customer's telephone"""
    countryId: ID

    """The email address of an authenticated or not user"""
    email: Email

    """The phone number of the customer"""
    phoneNumber: String
  ): Customer!

  """
  Get a list with all the payments methods (credit / debit cards) of the current authenticated user
  """
  customerPaymentMethods: [Card!]!

  """Fetch the billing data for the dashboard"""
  dashboardBilling(beachBarId: ID!, dates: DashboardDatesArg): DashboardBilling!

  """Fetch the booking data (reservations) for the dashboard"""
  dashboardBookings(beachBarId: ID!, dates: DashboardDatesArg): DashboardBookings!

  """Fetch the homepage data (of the day) for #beach_bar's dashboard"""
  dashboardHomePage(beachBarId: ID!, dates: DashboardDatesArg): DashboardHomePage!

  """Get a user's favourite #beach_bars list"""
  favouriteBeachBars(
    """How many data to fetch?"""
    limit: Int
  ): [UserFavoriteBar!]!

  """Get information for a food or drink of a #beach_bar"""
  food(id: ID!): Food

  """Get all foods and drinks of a #beach_bar"""
  foods(beachBarId: ID!): [Food!]!

  """A list with all the available #beach_bars"""
  getAllBeachBars: [BeachBar!]!

  """
  Returns the URL where the user will be redirected to login with Facebook
  """
  getFacebookOAuthUrl: URL!

  """Returns the URL where the user will be redirected to login with Google"""
  getGoogleOAuthUrl: URL!

  """
  Returns the URL where the user will be redirected to login with Instagram
  """
  getInstagramOAuthUrl: URL!

  """
  A list with all the #beach_bars, related to a user or are top selections
  """
  getPersonalizedBeachBars: [BeachBar!]!

  """Fetch a list with all the available hour times of a product"""
  getProductAvailabilityHours(
    """The date to search availability for"""
    date: Date!
    productId: ID!
  ): [ProductAvailabilityHour!]!
  getProductAvailabilityQuantity(
    """The date to search availability for"""
    date: Date!

    """The ID value of the ending hour time to search availability for"""
    endTimeId: Int!
    productId: ID!

    """The ID value of the starting hour time to search availability for"""
    startTimeId: Int!
  ): Int!

  """
  Returns the Stripe dashboard URL where the #beach_bar can access its Stripe dashboard, to view all transactions and payments
  """
  getStripeLoginLink(beachBarId: ID!): URL!

  """Get a list with all the hours this product has reservation limits"""
  hasProductReservationLimit(
    """
    The date to purchase the product. Its default value its the current date
    """
    date: Date!
    productId: ID!
  ): [AvailableProduct!]!
  hello: String!
  hey: Boolean!

  """Returns current authenticated user"""
  me: User

  """A list with #beach_bars, near to the user's location"""
  nearBeachBars(
    """The latitude of the user's location"""
    latitude: String!

    """The longitude of the user's location"""
    longitude: String!

    """How many beach bars to fetch"""
    take: Int
  ): [BeachBar!]!

  """Get the details of a specific payment / trip"""
  payment(
    """The referral code of the payment to fetch"""
    refCode: ID!
  ): Payment!

  """Get the amount of refund of a specific payment / trip"""
  paymentRefundAmount(
    """The referral code of the payment to fetch"""
    refCode: ID!
  ): Float!

  """
  Get a list of payments for a specific / latest month of an authenticated user
  """
  payments(
    """The ID of the month of the payments to fetch"""
    monthId: ID

    """The year of the payments to fetch"""
    year: Int
  ): [PaymentVisits!]!

  """Get a #beach_bar's product information"""
  product(id: ID!): Product

  """Get all products of a #beach_bar"""
  products(beachBarId: ID!): [Product!]!

  """Get the details of a a review of an authenticated user"""
  review(reviewId: ID!): BeachBarReview!

  """Get a list of all the reviews of an authenticated user"""
  reviews: [BeachBarReview!]

  """Search for available #beach_bars"""
  search(
    availability: SearchInput

    """
    A list with the filter IDs to add in the search, found in the documentation
    """
    filterIds: [String!]

    """The ID value of the search input value, found in the documentation"""
    inputId: ID

    """The ID value of a previous user search"""
    searchId: ID

    """The search input value, found in the documentation"""
    searchValue: String

    """
    A ID of the sort filter the user has selected, found in the documentation
    """
    sortId: ID
  ): Search!

  """Returns a list of formatted search input values"""
  searchInputValues: [SearchInputValue!]!

  """
  Returns the URL where the #beach_bar (owner) will be redirected to authorize and register with Stripe, for its connect account
  """
  stripeConnectUrl(phoneNumber: String): URL

  """Returns a list of user's recorded / saved history"""
  userHistory: [UserHistoryExtended!]!

  """Get a list with a user's latest searches"""
  userSearches(
    """How many data to fetch?"""
    limit: Int
  ): [UserSearch!]!
  verifyZeroCartTotal(cartId: ID!): Boolean!
}

"""Represents a country's or city's region"""
type Region {
  city: City!
  country: Country!
  id: ID!
  name: String!
}

"""Represents a reserved product"""
type ReservedProduct {
  date: DateTime!
  endTime: HourTime!
  id: BigInt!
  isRefunded: Boolean!
  payment: Payment!
  product: Product!
  startTime: HourTime!
}

"""
Represents a #beach_bar's restaurant food item (product) in its menu catalog
"""
type RestaurantFoodItem {
  id: BigInt!
  imgUrl: String
  menuCategory: RestaurantMenuCategory!
  name: String!
  price: Decimal!
}

"""Represents a category of a #beach_bar's restaurant menu"""
type RestaurantMenuCategory {
  id: ID!
  name: String!
}

"""Represents a review's visit type, by the user"""
type ReviewVisitType {
  id: ID!
  name: String!
}

"""Represents a vote for a user's review"""
type ReviewVote {
  id: BigInt!
  review: BeachBarReview!
  timestamp: DateTime!
  type: ReviewVoteType!
  updatedAt: DateTime!
  user: User!
}

"""Represents a vote for a user's review"""
type ReviewVoteType {
  id: ID!
  value: String!
}

"""Represents the payload (data) of Amazon Web Services (AWS) S3"""
type S3Payload {
  signedRequest: URL!

  """
  The presigned URL gives you access to the object identified in the URL, to upload the user's image
  """
  url: URL!
}

"""
Represents the info to be returned when a user searches for (availability) at #beach_bars
"""
type Search {
  """The results of the user search"""
  results: [SearchResultType!]!

  """The details of the search, made by a user"""
  search: UserSearch!
}

"""
Represents a filter used by users when searching for (availability at) #beach_bars
"""
type SearchFilter {
  description: String
  id: ID!
  name: String!
  publicId: String!
}

"""The arguments (args) used at #beach_bar search or availability"""
input SearchInput {
  """
  The number of adults to search availability at #beach_bars. Its value should be less or equal to 12 adults
  """
  adults: Int!

  """
  The number of children to search availability at #beach_bars. Its value should be less or equal to 8 children
  """
  children: Int

  """The date to search availability at #beach_bars"""
  date: Date!

  """The ID value of the hour time the user will leave the #beach_bar"""
  endTimeId: ID!

  """The ID value of the hour time the user will arrive at the #beach_bar"""
  startTimeId: ID!
}

"""Represents a potential input value of a user's search"""
type SearchInputValue {
  beachBar: BeachBar
  city: City
  country: Country

  """The search input value formatted into a string"""
  formattedValue: String!
  id: BigInt!
  publicId: String!
  region: Region
}

"""Represents the info (results) to be returned on user search"""
type SearchResultType {
  """The #beach_bar (object) found in the search"""
  beachBar: BeachBar!

  """
  A boolean that indicates if the #beach_bar has availability for the people selected
  """
  hasCapacity: Boolean!

  """
  A list with all the recommended products for a user's search, depending on #beach_bar's availability and products prices
  """
  recommendedProducts: [ProductRecommended!]!

  """The total price of the recommended products"""
  totalPrice: Float!
}

"""Represents a type of user's search sort filter"""
type SearchSort {
  id: ID!
  name: String!
}

"""A time string at UTC, such as 10:15:30Z"""
scalar Time

"""
A field whose value conforms to the standard URL format as specified in RFC3986: https://www.ietf.org/rfc/rfc3986.txt.
"""
scalar URL

"""Info to be returned when a reserved product details are updated"""
type UpdateReservedProduct {
  """The reserved product that is updated"""
  reservedProduct: ReservedProduct!

  """
  A boolean that indicates if the reserved product details have been successfully updated
  """
  updated: Boolean!
}

union UpdateReservedProductResult = Error | UpdateReservedProduct

"""The `Upload` scalar type represents a file upload."""
scalar Upload

"""Represents a user"""
type User {
  account: Account
  email: String!
  favoriteBars: [UserFavoriteBar!]!
  firstName: String

  """User's first and last name combines"""
  fullName: String
  id: ID!
  lastName: String
  reviewVotes: [ReviewVote!]!

  """A user's review on a #beach_bar"""
  reviews: [BeachBarReview!]
}

"""Credentials of user to sign up / login"""
input UserCredentials {
  """Email of user to sign up"""
  email: Email!

  """Password of user"""
  password: String!
}

"""A user's favorite #beach_bar"""
type UserFavoriteBar {
  beachBar: BeachBar!
  id: BigInt!
  user: User!
}

"""Represents a user's recorded / saved action"""
type UserHistory {
  activity: UserHistoryActivity!
  id: BigInt!
  objectId: BigInt
  timestamp: DateTime!
  user: User
}

"""Represents the type of action a user made"""
type UserHistoryActivity {
  id: ID!
  name: String!
}

"""Represents a user's action, with details about the objectId"""
type UserHistoryExtended {
  """Details about the #beach_bar the user may have visited"""
  beachBar: BeachBar

  """Details about what the user searched"""
  search: UserSearch

  """The info of the recorded / saved action of the user"""
  userHistory: UserHistory!
}

"""User details in login. The user's IP address is passed via the context"""
input UserLoginDetails {
  city: String

  """The alpha 2 code of the country, from where the user logins"""
  countryAlpha2Code: String
}

"""Represents a user search"""
type UserSearch {
  adults: Int
  children: Int
  date: DateTime
  filters: [SearchFilter!]!
  id: BigInt!
  inputValue: SearchInputValue!
  sort: SearchSort
  timestamp: DateTime!
  updatedAt: DateTime!
  user: User
}

union UserTypeResult = Error | User

type Visit {
  date: Date!
  endTime: HourTime!
  isRefunded: Boolean!
  isUpcoming: Boolean!
  payment: Payment!
  startTime: HourTime!
}

"""Represents a voting category"""
type VoteCategory {
  description: String!
  id: ID!
  refCode: String!
  title: String!
}

"""Represents the votes (voting result) of a voting category"""
type VoteTag {
  """The voting category these vote results are assigned to"""
  category: VoteCategory!
  downvotes: Int!
  id: ID!
  totalVotes: Int
  upvotes: Int!
}
scalar BigInt

"""Use JavaScript Date object for date-only fields."""
scalar Date

"""Use JavaScript Date object for date/time fields."""
scalar DateTime

"""
A field whose value conforms to the standard internet email address format as specified in RFC822: https://www.w3.org/Protocols/rfc822/.
"""
scalar Email

"""Represents a formatted error"""
type Error {
  """
  Returns an error in a type of string, if there is one, with a status and a message
  """
  error: ErrorObject
}

"""Represents an error object"""
type ErrorObject {
  """
  The error code of the operation, it can be found in a list in the documentation
  """
  code: String

  """A short description for the error occurred"""
  message: String
}

"""
A field whose value is a IPv4 address: https://en.wikipedia.org/wiki/IPv4.
"""
scalar IPv4

"""The `JSON` scalar type represents JSON values as specified by ECMA-404"""
scalar JSON

"""A time string at UTC, such as 10:15:30Z"""
scalar Time

"""The `Upload` scalar type represents a file upload."""
scalar Upload

"""
A field whose value conforms to the standard URL format as specified in RFC3986: https://www.ietf.org/rfc/rfc3986.txt.
"""
scalar URL

"""Represents the payload (data) of Amazon Web Services (AWS) S3"""
type S3Payload {
  signedRequest: URL!

  """
  The presigned URL gives you access to the object identified in the URL, to upload the user's image
  """
  url: URL!
}

"""Represents a #beach_bar's image (URL value)"""
type BeachBarImgUrl {
  id: ID!
  imgUrl: URL!

  """
  A short description about what the image represents. The characters of the description should not exceed the number 175
  """
  description: String
  beachBar: BeachBar!
  updatedAt: DateTime!
  timestamp: DateTime!
}

"""Info to be returned when an image (URL) is added to a #beach_bar"""
type AddBeachBarImgUrl {
  """The image that is added"""
  imgUrl: BeachBarImgUrl!

  """
  Indicates if the image (URL) has been successfully been added to the #beach_bar
  """
  added: Boolean!
}

"""
Info to be returned when the details of #beach_bar's image, are updated
"""
type UpdateBeachBarImgUrl {
  """The image that is updated"""
  imgUrl: BeachBarImgUrl!

  """Indicates if the image details have been successfully updated"""
  updated: Boolean!
}

"""Represents a #beach_bar's location details"""
type BeachBarLocation {
  id: ID!

  """The street address of the #beach_bar"""
  address: String!

  """The zip code of the #beach_bar, for its street address"""
  zipCode: String

  """The latitude of the #beach_bar in the maps, provided by Mapbox"""
  latitude: Float!

  """The longitude of the #beach_bar in the maps, provided by Mapbox"""
  longitude: Float!

  """
  The 'point' value generated from latitude & longitude, provided by the PostGIS PostgreSQL extension
  """
  whereIs: [Float!]

  """The country the #beach_bar is located at"""
  country: Country!

  """The city the #beach_bar is located at"""
  city: City!

  """The region the #beach_bar is located at"""
  region: Region
}

"""Info to be returned when location is added (assigned) to a #beach_bar"""
type AddBeachBarLocation {
  """The location of the #beach_bar that is added"""
  location: BeachBarLocation!

  """
  A boolean that indicates if the #beach_bar locations has been successfully being added
  """
  added: Boolean!
}

"""
Info to be returned when the details of #beach_bar location are updated
"""
type UpdateBeachBarLocation {
  """The #beach_bar location that is updated"""
  location: BeachBarLocation!

  """
  A boolean that indicates if the #beach_bar location details have been successfully updated
  """
  updated: Boolean!
}

"""Represents a coupon code interface for a #beach_bar"""
interface CouponCodeInterface {
  id: ID!
  refCode: String!
  title: String!
  discountPercentage: Float!
  isActive: Boolean!
  validUntil: DateTime

  """Represents how many times this coupon code can be used"""
  timesLimit: Int!

  """Represents the times this coupon code has been used"""
  timesUsed: Int!

  """The #beach_bar this coupon code applies to"""
  beachBar: BeachBar
}

"""Represents an offer code interface for an offer campaign"""
interface OfferCampaignCodeInterface {
  id: ID!
  refCode: String!

  """The total amount to make a discount from"""
  totalAmount: Float!

  """Represents how many times this offer code has been used"""
  timesUsed: Int!

  """The campaign the offer code is assigned to"""
  campaign: OfferCampaign!
  timestamp: DateTime!
  deletedAt: DateTime
}

"""Represents a coupon code"""
type CouponCode implements CouponCodeInterface {
  id: ID!
  refCode: String!
  title: String!
  discountPercentage: Float!
  isActive: Boolean!
  validUntil: DateTime

  """Represents how many times this coupon code can be used"""
  timesLimit: Int!

  """Represents the times this coupon code has been used"""
  timesUsed: Int!

  """The #beach_bar this coupon code applies to"""
  beachBar: BeachBar
}

"""Represents an offer campaign of a #beach_bar"""
type OfferCampaign {
  id: ID!
  title: String!
  discountPercentage: Float!
  isActive: Boolean!
  validUntil: DateTime

  """A list of products that are discounted via the campaign"""
  products: [Product!]!
}

"""Represents an offer code for a campaign of a product"""
type OfferCampaignCode implements OfferCampaignCodeInterface {
  id: ID!
  refCode: String!

  """The total amount to make a discount from"""
  totalAmount: Float!

  """Represents how many times this offer code has been used"""
  timesUsed: Int!

  """The campaign the offer code is assigned to"""
  campaign: OfferCampaign!
  timestamp: DateTime!
  deletedAt: DateTime
}

union VoucherCodeQueryResult = CouponCode | OfferCampaignCode | Error

"""Info to be returned when a coupon code is added (issued)"""
type AddCouponCode {
  """The coupon code that is added"""
  couponCode: CouponCode!

  """Indicates if the coupon code has been successfully added"""
  added: Boolean!
}

"""Info to be returned when a coupon code details are updated"""
type UpdateCouponCode {
  """The coupon code that is updated"""
  couponCode: CouponCode!

  """Indicates if the coupon code has been successfully updated"""
  updated: Boolean!

  """Indicates if the coupon code has been deleted"""
  deleted: Boolean!
}

"""
Info to be returned when an offer campaign is added to a or some #beach_bar's product(s)
"""
type AddOfferCampaign {
  """The offer campaign that is added"""
  offerCampaign: OfferCampaign!

  """Indicates if the offer campaign has been successfully added"""
  added: Boolean!
}

"""Info to be returned when an offer campaign details are updated"""
type UpdateOfferCampaign {
  """The offer campaign that is updated"""
  offerCampaign: OfferCampaign!

  """Indicates if the offer campaign details have been successfully updated"""
  updated: Boolean!
}

"""
Info to be returned when a new offer code, of an offer campaign, is added (issued)
"""
type AddOfferCampaignCode {
  """The offer code that is added (issued)"""
  offerCode: OfferCampaignCode!

  """Indicates if the offer code has been successfully added (issued)"""
  added: Boolean!
}

"""Represents a coupon code, with its referral code revealed"""
type CouponCodeReveal implements CouponCodeInterface {
  id: ID!

  """The referral code of the coupon code, to use and get a discount"""
  refCode: String!
  title: String!
  discountPercentage: Float!
  isActive: Boolean!
  validUntil: DateTime

  """Represents how many times this coupon code can be used"""
  timesLimit: Int!

  """Represents the times this coupon code has been used"""
  timesUsed: Int!

  """The #beach_bar this coupon code applies to"""
  beachBar: BeachBar
}

"""Represents an offer campaign code, with its referral code revealed"""
type OfferCampaignCodeReveal implements OfferCampaignCodeInterface {
  id: ID!

  """
  The referral code of the offer campaign code, to use and get a discount
  """
  refCode: String!

  """The total amount to make a discount from"""
  totalAmount: Float!

  """Represents how many times this offer code has been used"""
  timesUsed: Int!

  """The campaign the offer code is assigned to"""
  campaign: OfferCampaign!
  timestamp: DateTime!
  deletedAt: DateTime
}

"""
Represents a the limit number, on how many times a product can be provided by a #beach_bar on a specific date
"""
type ProductReservationLimit {
  id: BigInt!
  limitNumber: Int!

  """The date this limit is applicable for the product"""
  date: Date!

  """The product this limit is assigned to"""
  product: Product!

  """The hour that this limit is applicable for"""
  startTime: HourTime!

  """The hour that this limit ends"""
  endTime: HourTime!
}

"""
Info to be returned when a reservation limit is added to a #beach_bar's product
"""
type AddProductReservationLimit {
  """The reservation limit that is added"""
  reservationLimit: [ProductReservationLimit!]!

  """
  A boolean that indicates if the limit has been successfully added to the product
  """
  added: Boolean!
}

"""
Info to be returned when a reservation limit of a #beach_bar's product is updated
"""
type UpdateProductReservationLimit {
  """The reservation limit that is updated"""
  reservationLimit: [ProductReservationLimit!]!

  """
  A boolean that indicates if the limit details has been successfully updated
  """
  updated: Boolean!
}

"""
Info to be returned, when checking if a #beach_bar product is available
"""
type AvailableProduct {
  """The hour, to check if available"""
  hourTime: HourTime!

  """A boolean that indicates if the product is available in the hour time"""
  isAvailable: Boolean!
}

"""Represents a product of a #beach_bar"""
type Product {
  id: ID!
  name: String!
  description: String
  price: Float!
  isActive: Boolean!
  isIndividual: Boolean!
  maxPeople: Int!
  imgUrl: URL

  """The #beach_bar that sells the product"""
  beachBar: BeachBar!

  """The category of the product"""
  category: ProductCategory!
  updatedAt: DateTime!
  deletedAt: DateTime
}

"""
Represents a product of a #beach_bar, and info about it's rest availability quantity
"""
type ProductAvailability {
  product: Product!

  """How many other's products of this type are available for purchase"""
  quantity: Int!
}

"""Info to be returned when a product is added to a #beach_bar"""
type AddProduct {
  """The product that is added"""
  product: Product!

  """
  A boolean that indicates if the product has been successfully added to the #beach_bar
  """
  added: Boolean!
}

"""Info to be returned when a product of a #beach_bar is updated"""
type UpdateProduct {
  """The product that is updated"""
  product: Product!

  """A boolean that indicates if the product has been successfully updated"""
  updated: Boolean!
}

"""
The info to be returned when checking for a #beach_bar product's availability hour times
"""
type ProductAvailabilityHour {
  """The hour time of a day"""
  hourTime: HourTime!
  isAvailable: Boolean!
}

"""Represents a category of a #beach_bar's restaurant menu"""
type RestaurantMenuCategory {
  id: ID!
  name: String!
}

"""
Represents a #beach_bar's restaurant food item (product) in its menu catalog
"""
type RestaurantFoodItem {
  id: ID!
  name: String!
  price: Float!

  """The URL value of the food item's picture"""
  imgUrl: URL

  """The menu category this food item is associated to"""
  menuCategory: RestaurantMenuCategory!
}

"""
Info to be returned when a food item is added to a #beach_bar's restaurant
"""
type AddRestaurantFoodItem {
  """The food item being added & its info"""
  foodItem: RestaurantFoodItem!

  """
  A boolean that indicates if the food item has been successfully being added to a restaurant
  """
  added: Boolean!
}

"""
Info to be returned when the food item of #beach_bar restaurant, is updated
"""
type UpdateRestaurantFoodItem {
  """The food item being updated"""
  foodItem: RestaurantFoodItem!

  """
  A boolean that indicates if the food item has been successfully updated
  """
  updated: Boolean!
}

"""Represents a #beach_bar's restaurant"""
type BeachBarRestaurant {
  """The ID value of the restaurant"""
  id: ID!

  """The name of the restaurant"""
  name: String!

  """A short description (info) about the restaurant"""
  description: String

  """
  A boolean that indicates if the restaurant is active. It can be changed by the primary owner of the #beach_bar
  """
  isActive: Boolean!

  """The #beach_bar this restaurant is owned by"""
  beachBar: BeachBar!

  """A list of food items (products) in the menu of the restaurant"""
  foodItems: [RestaurantFoodItem!]!
}

"""Info to be returned when a restaurant is added to a #beach_bar"""
type AddBeachBarRestaurant {
  """The restaurant that is added & its info"""
  restaurant: BeachBarRestaurant!

  """
  A boolean that indicates if the restaurant has been successfully being added to the #beach_bar
  """
  added: Boolean!
}

"""
Info to be returned when the details of #beach_bar restaurant, are updated
"""
type UpdateBeachBarRestaurant {
  """The restaurant that is updated"""
  restaurant: BeachBarRestaurant!

  """
  A boolean that indicates if the restaurant details have been successfully updated
  """
  updated: Boolean!
}

"""Represents a vote for a user's review"""
type ReviewVoteType {
  """The ID value of the vote type"""
  id: ID!

  """The type value of the vote"""
  value: String!
}

"""Represents a vote for a user's review"""
type ReviewVote {
  """The ID value of the vote"""
  id: ID!

  """The review of where the vote is added"""
  review: BeachBarReview!

  """The user that added the vote"""
  user: User!

  """The type of the vote"""
  type: ReviewVoteType!

  """The last time the vote was updated, in the format of a timestamp"""
  updatedAt: DateTime!

  """The timestamp recorded, when the vote was created"""
  timestamp: DateTime!
}

"""Represents an answer for a review of a #beach_bar, by the owner"""
type ReviewAnswer {
  """The ID value of the particular review answer"""
  id: ID!

  """
  The body (content) of the review answer, written by the reviewed #beach_bar's owner
  """
  body: String!

  """The review this answer is assigned to"""
  review: BeachBarReview!

  """The last time user's account was updated, in the format of a timestamp"""
  updatedAt: DateTime!

  """The timestamp recorded, when the user's account was created"""
  timestamp: DateTime!
}

"""Info to be returned when an answer is added to a customer's review"""
type AddReviewAnswer {
  """The answer that is added to the review"""
  answer: ReviewAnswer!

  """
  A boolean that indicates if the answer has been successfully being added to the customer's review
  """
  added: Boolean!
}

"""Info to be returned when the answer of a customer's review is updated"""
type UpdateReviewAnswer {
  """The review answer that is updated"""
  answer: ReviewAnswer!

  """
  A boolean that indicates if the review answer has been successfully updated
  """
  updated: Boolean!
}

"""Represents a #beach_bar's review, by a customer"""
type BeachBarReview {
  """The ID value of the review"""
  id: ID!

  """The user's rating, between 0 and 10"""
  ratingValue: Int!

  """A positive comment for the #beach_bar"""
  positiveComment: String

  """A negative comment for the #beach_bar"""
  negativeComment: String

  """A summary (description) of the user's overall review"""
  review: String
  beachBar: BeachBar!

  """The votes of users for this review"""
  votes: [ReviewVote!]!

  """The answer of the #beach_bar to this review"""
  answer: ReviewAnswer

  """The customer that submitted the particular review for the #beach_bar"""
  customer: Customer!

  """The type of visit for the user"""
  visitType: ReviewVisitType

  """The visited month of the customer visited the #beach_bar"""
  month: MonthTime

  """
  The relevant payment the user made, to be able to review a #beach_bar's products
  """
  payment: Payment!
  updatedAt: DateTime!
  timestamp: DateTime!
}

"""Info to be returned when a review is added to a #beach_bar"""
type AddBeachBarReview {
  """The review that is added"""
  review: BeachBarReview!

  """
  A boolean that indicates if the review has been successfully being added to the #beach_bar
  """
  added: Boolean!
}

"""
Info to be returned when the details of a customer's review, are updated
"""
type UpdateBeachBarReview {
  """The review that is updated"""
  review: BeachBarReview!

  """A boolean that indicates if the review has been successfully updated"""
  updated: Boolean!
}

"""Represents a service (feature), which a #beach_bar can provide"""
type BeachBarService {
  id: ID!
  name: String!

  """Details about which icon to be used in the front-end"""
  icon: Icon!
}

"""Represents a #beach_bar's feature (service) & its details"""
type BeachBarFeature {
  """The feature (service) the #beach_bar provides"""
  service: BeachBarService!

  """The #beach_bar that provides the feature (service)"""
  beachBar: BeachBar!

  """
  An integer that indicates the quantity of the service, a #beach_bar provides
  """
  quantity: Int!

  """A short description about the service"""
  description: String
  updatedAt: DateTime!
  timestamp: DateTime!
}

"""Info to be returned when a feature is added (assigned) to a #beach_bar"""
type AddBeachBarFeature {
  """The feature that will be added (assigned) to the #beach_bar"""
  feature: BeachBarFeature!

  """
  A boolean that indicates if the feature has been successfully added (assigned) to the #beach_bar
  """
  added: Boolean!
}

"""
Info to be returned when the info of a feature of a #beach_bar, are updated
"""
type UpdateBeachBarFeature {
  """The feature that will be updated"""
  feature: BeachBarFeature!

  """A boolean that indicates if the feature has been successfully updated"""
  updated: Boolean!
}

"""Represents a #beach_bar"""
type BeachBar {
  """The ID value of the #beach_bar"""
  id: ID!

  """The name of the #beach_bar"""
  name: String!

  """The "slugified" name of the #beach_bar, in a URL friendly way"""
  slug: String!

  """A description text about the #beach_bar"""
  description: String

  """The entry fee this #beach_bar has applied for guests"""
  entryFee: Float

  """The average rating of all the user reviews for this #beach_bar"""
  avgRating: Float!
  thumbnailUrl: URL!

  """A phone number to contact the #beach_bar directly"""
  contactPhoneNumber: String!

  """
  A boolean that indicates if to NOT display the #beach_bar contact phone number
  """
  hidePhoneNumber: Boolean!

  """A boolean that indicates if the #beach_bar is active or not"""
  isActive: Boolean!

  """
  A boolean that indicates if the #beach_bar is shown in the search results, even if it has no availability
  """
  isAvailable: Boolean!

  """The location of the #beach_bar"""
  location: BeachBarLocation!

  """Get the location of the #beach_bar formatted"""
  formattedLocation: String!

  """A list with all the payments of a #beach_bar"""
  payments: [Payment!]!

  """The category (type) of the #beach_bar"""
  category: BeachBarCategory!

  """A list with all the #beach_bar's images (URL values)"""
  imgUrls: [BeachBarImgUrl!]!

  """A list with all the #beach_bar's products"""
  products: [Product!]!

  """A list of all the reviews of the #beach_bar"""
  reviews: [BeachBarReview!]!

  """A list of all the #beach_bar's features"""
  features: [BeachBarFeature!]!

  """A list of all the styles the #beach_bar is associated with"""
  styles: [BeachBarStyle!]

  """A list of all the restaurants of a #beach_bar"""
  restaurants: [BeachBarRestaurant!]

  """The default currency of the #beach_bar"""
  defaultCurrency: Currency!

  """A list of all the owners of the #beach_bar"""
  owners: [BeachBarOwner!]!

  """
  The opening quarter time of the #beach_bar, in the time zone of its country
  """
  openingTime: QuarterTime!

  """
  The closing quarter time of the #beach_bar, in the time zone of its country
  """
  closingTime: QuarterTime!

  """The last time the #beach_bar was updated, in the format of a timestamp"""
  updatedAt: DateTime!

  """The timestamp recorded, when the #beach_bar was created"""
  timestamp: DateTime!
}

union BeachBarResult = BeachBar | Error

"""
Info to be returned when a #beach_bar is added (registered) to the platform
"""
type AddBeachBar {
  """The #beach_bar that is added"""
  beachBar: BeachBar!

  """
  A boolean that indicates if the #beach_bar has been successfully being registered
  """
  added: Boolean!
}

"""Info to be returned when the details of #beach_bar are updated"""
type UpdateBeachBar {
  """The #beach_bar that is updated"""
  beachBar: BeachBar!

  """
  A boolean that indicates if the #beach_bar details have been successfully updated
  """
  updated: Boolean!
}

"""Boolean values to show if the #beach_bar is available"""
type BeachBarAvailability {
  """
  A boolean that indicates if the #beach_bar has availability for the dates selected
  """
  hasAvailability: Boolean

  """
  A boolean that indicates if the #beach_bar has availability for the people selected
  """
  hasCapacity: Boolean
}

"""Represents a shopping cart with its products"""
type CartProduct {
  id: ID!
  quantity: Int!

  """The date of purchase of the product"""
  date: Date!
  timestamp: DateTime!

  """The shopping cart the product is added to"""
  cart: Cart!

  """The product that is added to the shopping cart"""
  product: Product!

  """The hour of use of the product"""
  time: HourTime!
}

"""Info to be returned when a product is added to a shopping cart"""
type AddCartProduct {
  """The product that is added to the cart"""
  product: CartProduct!
  added: Boolean!
}

"""Info to be returned when a product of a shopping cart is updated"""
type UpdateCartProduct {
  """The product that is updated"""
  product: CartProduct!
  updated: Boolean!
}

"""Represents a shopping cart"""
type Cart implements Node {
  id: ID!
  total: Float!

  """The use that has created this shopping cart"""
  user: User

  """A list with all the cart products"""
  products: [CartProduct!]
}

"""Represents a customer's credit or debit card"""
type Card {
  id: ID!
  type: String!
  expMonth: Int!
  expYear: Int!
  last4: String!
  cardholderName: String!
  isDefault: Boolean!
  stripeId: String!

  """The customer that owns this credit or debit card"""
  customer: Customer!

  """The brand of the credit or debit card"""
  brand: CardBrand

  """The country of the customer's card"""
  country: Country
}

"""Info to be returned when a card is added to a customer"""
type AddCard {
  """The card that is added to a customer"""
  card: Card!

  """A boolean that indicates if the card has been successfully added"""
  added: Boolean!
}

"""Info to be returned when a customer card details are updated"""
type UpdateCard {
  """The card that is updated"""
  card: Card!

  """
  A boolean that indicates if the card details have been successfully updated
  """
  updated: Boolean!
}

"""Represents a customer"""
type Customer {
  id: ID!
  email: Email!
  phoneNumber: String

  """The user that is a customer too"""
  user: User

  """A list of all the customers cards"""
  cards: [Card!]

  """The country of the customer"""
  country: Country
}

"""Info to be returned when a customer is added (registered)"""
type AddCustomer {
  """The customer that is added (registered)"""
  customer: Customer!
  added: Boolean!
}

"""Info to be returned when a customer details are updated"""
type UpdateCustomer {
  """The customer that is updated"""
  customer: Customer!
  updated: Boolean!
}

"""Represents the brand of a credit or debit card"""
type CardBrand {
  id: ID!
  name: String!
}

"""Represents a city of a country"""
type City {
  """The ID of the city"""
  id: ID!

  """The name of the city"""
  name: String!

  """The country of the city"""
  country: Country
}

"""Represents a currency"""
type Currency {
  id: ID!

  """The name of the currency"""
  name: String!

  """The ISO code of the currency internationally"""
  isoCode: String!

  """The currency's symbol"""
  symbol: String!

  """The currency's second (alternative) symbol"""
  secondSymbol: String
}

"""Represents a country"""
type Country {
  """The ID of the country"""
  id: ID!

  """The name of the country"""
  name: String!

  """The ISO 2 Alpha registered code of the country"""
  alpha2Code: String!

  """The ISO 3 Alpha registered code of the country"""
  alpha3Code: String!

  """The calling code of the country"""
  callingCode: String!

  """A boolean that indicates if the country is part of European Union (EU)"""
  isEu: Boolean!

  """The cities of the country"""
  cities: [City!]

  """The currency of the country"""
  currency: Currency!
}

"""Represents the status of a payment"""
type PaymentStatus {
  id: ID!
  name: String!
}

"""Represents a component of a product. For example a sunbed."""
type ProductComponent {
  id: ID!
  name: String!

  """Details about which icon to be used in the front-end"""
  icon: Icon!
}

"""
Represents a component of a product category, including the quantity that each category has.
"""
type ProductCategoryComponent {
  quantity: Int!
  component: ProductComponent!
  category: ProductCategory!
}

"""Represents a #beach_bar's product category"""
type ProductCategory {
  id: ID!
  name: String!
  underscoredName: String!
  description: String

  """The components of a category's product"""
  components: [ProductCategoryComponent!]!
}

"""Represents a review's visit type, by the user"""
type ReviewVisitType {
  id: ID!

  """The name of the particular visit type"""
  name: String!
}

"""Represents each hour of the day"""
type HourTime {
  id: ID!
  value: String!
  utcValue: Time!
}

"""Represents each quarter of the day"""
type QuarterTime {
  id: ID!
  value: String!
  utcValue: Time!
}

"""Represents each month of the year"""
type MonthTime {
  id: ID!
  value: String!

  """The days (count) of a month"""
  days: Int!
}

"""Represents a #beach_bar's category"""
type BeachBarCategory {
  id: ID!
  name: String!
  description: String
}

"""Represents a SVG icon to be used in the front-end"""
type Icon {
  id: ID!
  name: String!

  """A unique public ID for the icon, to be matched in the front-end"""
  publicId: String!
}

"""Represents a voting category"""
type VoteCategory {
  id: ID!
  title: String!
  description: String!
  refCode: String!
}

"""Represents the votes (voting result) of a voting category"""
type VoteTag {
  id: ID!
  upvotes: Int!
  downvotes: Int!
  totalVotes: Int

  """The voting category these vote results are assigned to"""
  category: VoteCategory!
}

"""Mutation"""
type Mutation {
  """Upload a single file"""
  uploadSingleFile(
    """The file to upload"""
    file: Upload!
  ): File

  """Sample mutation"""
  hello(name: String): String!

  """Sign the S3 URL for an object"""
  signS3(
    """The name of the file to sign (upload)"""
    filename: String!

    """The type of the file to sign (upload)"""
    filetype: String!

    """The name of bucket in AWS S3"""
    s3Bucket: String!
  ): S3Payload!

  """Add an image (URL) to a #beach_bar"""
  addBeachBarImgUrl(
    beachBarId: ID!

    """The URL value of the image"""
    imgUrl: URL!

    """
    A short description about what the image represents. The characters of the description should not exceed the number 175
    """
    description: String
  ): AddBeachBarImgUrl!

  """Update the details of a #beach_bar's image"""
  updateBeachBaImgUrl(imgUrlId: ID!, imgUrl: URL, description: String): UpdateBeachBarImgUrl!

  """Delete an image (URL) from a #beach_bar"""
  deleteBeachBarImgUrl(imgUrlId: ID!): Delete!

  """Add (assign) a location to a #beach_bar"""
  addBeachBarLocation(
    beachBarId: ID!

    """The address of the #beach_bar"""
    address: String!

    """The zip (postal) code of the #beach_bar"""
    zipCode: String

    """The latitude of the location of the #beach_bar"""
    latitude: String!

    """The longitude of the location of the #beach_bar"""
    longitude: String!

    """The ID value of the country the #beach_bar is located at"""
    countryId: ID!

    """The city the #beach_bar is located at"""
    city: String!

    """The #beach_bar's region"""
    region: ID
  ): AddBeachBarLocation!

  """Update the location details of a #beach_bar"""
  updateBeachBarLocation(locationId: ID!, address: String, zipCode: String, latitude: String, longitude: String, countryId: ID, city: String, region: String): UpdateBeachBarLocation!
  cacheBeachBars: Boolean!

  """Add (register) a new #beach_bar to the platform"""
  addBeachBar(
    """
    The name to register the #beach_bar. It should be unique among other ones
    """
    name: String!

    """A description of the #beach_bar"""
    description: String

    """
    A thumbnail URL value of the #beach_bar's image to show in search results
    """
    thumbnailUrl: String

    """A phone number to contact the #beach_bar directly"""
    contactPhoneNumber: String!

    """
    A boolean that indicates if to NOT display the phone number when retrieving #beach_bar info. Its default value is set to false
    """
    hidePhoneNumber: Boolean! = false

    """
    Set to true if the #beach_bar accepts for a customer / user to have less than the #beach_bar minimum currency price
    """
    zeroCartTotal: Boolean!

    """The ID value of the category of the #beach_bar"""
    categoryId: ID!

    """
    The ID value of the opening quarter time of the #beach_bar, in its country time zone
    """
    openingTimeId: ID!

    """
    The ID value of the closing quarter time of the #beach_bar, in its country time zone
    """
    closingTimeId: ID!

    """The response code from Google's OAuth callback"""
    code: String!

    """The response state, to check if everything went correct"""
    state: String!
  ): AddBeachBar!

  """Update a #beach_bar details"""
  updateBeachBar(
    beachBarId: ID!

    """
    The name to register the #beach_bar. It should be unique among other ones
    """
    name: String

    """A description of the #beach_bar"""
    description: String

    """
    A thumbnail URL value of the #beach_bar's image to show in search results
    """
    thumbnailUrl: String

    """A phone number to contact the #beach_bar directly"""
    contactPhoneNumber: String

    """
    A boolean that indicates if to NOT display the phone number when retrieving #beach_bar info. Its default value is set to false
    """
    hidePhoneNumber: Boolean

    """
    Set to true if the #beach_bar accepts for a customer / user to have less than the #beach_bar minimum currency price
    """
    zeroCartTotal: Boolean

    """
    Set to true, if to show #beach_bar in the search results, even if it has no availability
    """
    isAvailable: Boolean

    """Set to true if the #beach_bar is active"""
    isActive: Boolean

    """The ID value of the category of the #beach_bar"""
    categoryId: ID

    """
    The ID value of the opening quarter time of the #beach_bar, in its country zone
    """
    openingTimeId: ID

    """
    The ID value of the closing quarter time of the #beach_bar, in its country zone
    """
    closingTimeId: ID
  ): UpdateBeachBar!

  """Delete (remove) a #beach_bar from the platform"""
  deleteBeachBar(beachBarId: ID!): Delete!

  """Add a product to a #beach_bar"""
  addProduct(
    beachBarId: ID!

    """The name of the product"""
    name: String!

    """A short description of the product"""
    description: String

    """The ID value of the category of the product"""
    categoryId: ID!

    """The price of the product"""
    price: Float!

    """
    A boolean that indicates if the product is active & can be purchased by a user or a customer
    """
    isActive: Boolean = false

    """How many people can use this specific product"""
    maxPeople: Int!

    """An image for the #beach_bar's product"""
    imgUrl: URL!
  ): AddProduct!

  """Update a #beach_bar's product info"""
  updateProduct(
    productId: ID!

    """The name of the product"""
    name: String!

    """A short description of the product"""
    description: String

    """The ID value of the category of the product"""
    categoryId: ID

    """The price of the product"""
    price: Float

    """
    A boolean that indicates if the product is active & can be purchased by a user or a customer
    """
    isActive: Boolean

    """How many people can use this specific product"""
    maxPeople: Int!

    """An image for the #beach_bar's product"""
    imgUrl: URL
  ): UpdateProduct!

  """Delete (remove) a product from a #beach_bar"""
  deleteProduct(productId: ID!): Delete!

  """Restore a (soft) deleted #beach_bar product"""
  restoreBeachBarProduct(productId: ID!): UpdateProduct!

  """Add a coupon code"""
  addCouponCode(
    """The name or a short description of the coupon code"""
    title: String!

    """The percentage of the coupon code discount"""
    discountPercentage: Float!
    beachBarId: ID

    """
    A timestamp that indicates until what date and time this coupon code is applicable and valid
    """
    validUntil: DateTime!

    """
    Set to true if coupon code is active. Its default value is set to false
    """
    isActive: Boolean! = false

    """Represents how many times this coupon code can be used"""
    timesLimit: Int!
  ): AddCouponCode!

  """Update a coupon code"""
  updateCouponCode(
    couponCodeId: ID!

    """The name or a short description of the coupon code"""
    title: String

    """The percentage of the coupon code discount"""
    discountPercentage: Float

    """
    A timestamp that indicates until what date and time this coupon code is applicable and valid
    """
    validUntil: DateTime

    """
    Set to true if coupon code is active. Its default value is set to false
    """
    isActive: Boolean

    """Represents how many times this coupon code can be used"""
    timesLimit: Int
  ): UpdateCouponCode!
  deleteCouponCode(couponCodeId: ID!): Delete!

  """Add an offer campaign to a #beach_bar"""
  addOfferCampaign(
    productIds: [ID!]!

    """The name or a short description of the coupon code"""
    title: String!

    """The percentage of the coupon code discount"""
    discountPercentage: Float!

    """
    A timestamp that indicates until what date and time this coupon code is applicable and valid
    """
    validUntil: DateTime!

    """
    Set to true if coupon code is active. Its default value is set to false
    """
    isActive: Boolean! = false
  ): AddOfferCampaign!

  """Update the details of an offer campaign of a #beach_bar"""
  updateOfferCampaign(
    offerCampaignId: ID!

    """The ID value of the product"""
    productIds: [ID]!

    """The name or a short description of the coupon code"""
    title: String

    """The percentage of the coupon code discount"""
    discountPercentage: Float

    """
    A timestamp that indicates until what date and time this coupon code is applicable and valid
    """
    validUntil: DateTime

    """
    Set to true if coupon code is active. Its default value is set to false
    """
    isActive: Boolean
  ): UpdateOfferCampaign!

  """Delete an offer campaign of a #beach_bar"""
  deleteOfferCampaign(offerCampaignId: ID!): Delete!

  """Add (issue) a new offer code"""
  addOfferCampaignCode(offerCampaignId: ID!): AddOfferCampaignCode!

  """Delete (invalidate) an offer code of an offer campaign"""
  deleteOfferCode(offerCodeId: ID!): Delete!

  """Add a reservation limit to a #beach_bar product"""
  addProductReservationLimit(
    """The ID value of the product to add this reservation limit"""
    productId: ID!

    """
    The number to add as a limit a #beach_bar can provide the product, for specific date(s)
    """
    limit: Int!

    """A list of days this limit is applicable for"""
    dates: [Date!]!

    """The ID value of the hour time from when this limit is applicable"""
    startTimeId: ID!

    """
    The ID value of the hour time from when this limit is terminated (is not applicable anymore)
    """
    endTimeId: ID!
  ): AddProductReservationLimit!

  """Update a #beach_bar's product reservation limit"""
  updateProductReservationLimit(reservationLimitIds: [ID!]!, limit: Int, startTimeId: ID, endTimeId: ID): UpdateProductReservationLimit!

  """Delete a or some reservation limit(s) from a #beach_bar's product"""
  deleteProductReservationLimit(reservationLimitIds: [ID!]!): Delete!

  """Add a food item to a #beach_bar restaurant"""
  addRestaurantFoodItem(
    restaurantId: ID!

    """The name of the food item"""
    name: String!

    """The price of the food item in the menu catalogue"""
    price: Float!

    """
    The ID value of the category of the gastronomic menu, the food item is assigned to
    """
    menuCategoryId: Int!

    """An image representing the food item product"""
    imgUrl: URL
  ): AddRestaurantFoodItem!

  """Update a #beach_bar's restaurant food item details"""
  updateRestaurantFoodItem(foodItemId: ID!, name: String, price: Float, menuCategoryId: ID, imgUrl: String): UpdateRestaurantFoodItem!

  """Delete (remove) a food item from a #beach_bar's restaurant"""
  deleteRestaurantFoodItem(foodItemId: ID!): Delete!

  """Add a restaurant of a #beach_bar"""
  addBeachBarRestaurant(
    beachBarId: ID!

    """The name of the restaurant"""
    name: String!

    """A short description, info text, about the restaurant itself"""
    description: String

    """
    A boolean that indicates if the restaurant is active or not. Its default value is false
    """
    isActive: Boolean = false
  ): AddBeachBarRestaurant!

  """Update the restaurant details of a #beach_bar"""
  updateBeachBarRestaurant(restaurantId: ID!, name: String, description: String, isActive: Boolean): UpdateBeachBarRestaurant!

  """Delete (remove) a restaurant from a #beach_bar"""
  deleteBeachBarRestaurant(restaurantId: ID!): Delete!

  """Upvote or downvote a customer's review on a #beach_bar"""
  updateReviewVote(
    """The ID value of the customer's review"""
    reviewId: ID!

    """Set to true if to increment the review's votes"""
    upvote: Boolean

    """Set to true if to decrement the review's votes"""
    downvote: Boolean
  ): UpdateBeachBarReview!

  """Add a reply to a #beach_bar's review, by its owner"""
  addReviewAnswer(
    """The ID value of the customer's review"""
    reviewId: ID!

    """The body of the reply"""
    body: String!
  ): AddReviewAnswer!

  """Update the body of a #beach_bar's review reply"""
  updateReviewAnswer(
    """The ID value of the review's answer"""
    answerId: ID!

    """The body of the reply"""
    body: String
  ): UpdateReviewAnswer!

  """Delete (remove) a reply from a #beach_bar's review"""
  deleteReviewAnswer(
    """The ID value of the review's answer"""
    answerId: ID!
  ): Delete!

  """Verify a user's payment to submit review"""
  verifyUserPaymentForReview(
    beachBarId: ID!

    """The referral code of the customer payment, to find"""
    refCode: String
  ): Boolean!

  """Add a customer's review on a #beach_bar"""
  addReview(
    beachBarId: ID!

    """The referral code of the payment, to find"""
    paymentRefCode: String

    """The rating value between 1 to 10, the customers rates the #beach_bar"""
    ratingValue: Int!
    visitTypeId: ID
    monthTimeId: ID

    """A positive comment about the #beach_bar"""
    positiveComment: String

    """A negative comment about the #beach_bar"""
    negativeComment: String

    """A summary (description) of the user's overall review"""
    review: String
  ): AddBeachBarReview!

  """Update a customer's review on a #beach_bar"""
  updateReview(
    reviewId: ID!

    """The rating value between 1 to 10, the customers rates the #beach_bar"""
    ratingValue: Int
    visitTypeId: ID
    monthTimeId: ID

    """A positive comment about the #beach_bar"""
    positiveComment: String

    """A negative comment about the #beach_bar"""
    negativeComment: String

    """A summary (description) of the user's overall review"""
    review: String
  ): UpdateBeachBarReview!

  """Delete a customer's review on a #beach_bar"""
  deleteReview(reviewId: ID!): Delete!

  """Add (assign) a feature to a #beach_bar"""
  addBeachBarFeature(
    beachBarId: ID!
    featureId: ID!

    """
    An integer that indicates the quantity of the service, a #beach_bar provides
    """
    quantity: Int! = 1

    """A short description about the service"""
    description: String
  ): AddBeachBarFeature!

  """Update a feature of a #beach_bar"""
  updateBeachBarFeature(beachBarId: ID!, featureId: ID!, quantity: Int, description: String): UpdateBeachBarFeature!

  """Delete (remove) a feature (service) from a #beach_bar"""
  deleteBeachBarFeature(beachBarId: ID!, featureId: ID!): Delete!

  """
  Delete a cart after a transaction. This mutation is also called if the user is not authenticated & closes the browser tab
  """
  deleteCart(cartId: ID!): Delete!

  """Add a product to a shopping cart"""
  addCartProduct(
    """The ID value of the shopping cart"""
    cartId: ID!

    """The ID value of the product to add"""
    productId: ID!

    """
    The number that indicates how many times to add the product to the cart. Its default value is 1
    """
    quantity: Int = 1

    """
    The date to purchase the product. Its default value its the current date
    """
    date: Date!

    """The ID value of the hour time of product use"""
    timeId: ID
  ): AddCartProduct!

  """Update the quantity of a product in a shopping cart"""
  updateCartProduct(id: ID!, quantity: Int): UpdateCartProduct!

  """Delete (remove) a product from a shopping cart"""
  deleteCartProduct(id: ID!): DeleteResult!

  """Add a payment method (credit / debit card) to a customer"""
  addCustomerPaymentMethod(
    """
    A token returned by Stripe (Stripe.js & Elements), which will automatically validate the card
    """
    source: String!

    """The ID value of the registered customer"""
    customerId: ID

    """The (full) name of the cardholder of the card registered"""
    cardholderName: String!

    """
    A boolean that indicates if the card registered is the default one for the customer, to use in its transactions. Its default value is false
    """
    isDefault: Boolean = false

    """
    A boolean that indicates if the card should be saved for future payments. Defaults to true
    """
    savedForFuture: Boolean = true
  ): AddCard!

  """Update the details of customer's card"""
  updateCustomerPaymentMethod(
    """The ID of the card to update"""
    cardId: ID!

    """The (full) name of the cardholder of the card"""
    cardholderName: String

    """The expiration month of the card"""
    expMonth: Int

    """The expiration year of the card"""
    expYear: Int

    """
    A boolean that indicates if the card is the default one for the customer, to use in its transactions
    """
    isDefault: Boolean
  ): UpdateCard!

  """Delete (remove) a payment method (credit / debit card) from a customer"""
  deleteCustomerPaymentMethod(cardId: ID!): Delete!

  """Update a customer's details"""
  updateCustomer(
    """The ID value of the customer"""
    customerId: ID!

    """The phone number of the customer"""
    phoneNumber: String

    """The ISO code of the country of customer's telephone"""
    countryIsoCode: String
  ): UpdateCustomer!

  """Delete (remove) a customer"""
  deleteCustomer(customerId: ID): Delete!

  """Authorize a user with Google"""
  authorizeWithGoogle(
    """The response code from Google's OAuth callback"""
    code: String!

    """The response state, to check if everything went correct"""
    state: String!

    """User details in login"""
    loginDetails: UserLoginDetails

    """Set to true if you want to sign up an owner for a #beach_bar"""
    isPrimaryOwner: Boolean = false
  ): OAuthAuthorization!

  """Authorize a user with Facebook"""
  authorizeWithFacebook(
    """The response code from Google's OAuth callback"""
    code: String!

    """The response state, to check if everything went correct"""
    state: String!

    """User details in login"""
    loginDetails: UserLoginDetails

    """Set to true if you want to sign up an owner for a #beach_bar"""
    isPrimaryOwner: Boolean = false
  ): OAuthAuthorization!

  """Authorize a user with Instagram"""
  authorizeWithInstagram(
    """Email address of user to authorize with Instagram"""
    email: Email!

    """The response code from Google's OAuth callback"""
    code: String!

    """The response state, to check if everything went correct"""
    state: String!

    """User details in login"""
    loginDetails: UserLoginDetails

    """Set to true if you want to sign up an owner for a #beach_bar"""
    isPrimaryOwner: Boolean = false
  ): OAuthAuthorization!

  """
  Add (assign) another owner to a #beach_bar too. Only available for the primary owner of a #beach_bar
  """
  addBeachBarOwner(
    """The ID value of the #beach_bar the owner will be added (assigned) to"""
    beachBarId: ID!

    """
    The user to add (assign) to the #beach_bar, to become one of its owners
    """
    userId: ID

    """
    Set to true if the user will become the or one of the primary owners of the #beach_bar. It is set to false by default
    """
    isPrimary: Boolean = false
  ): AddBeachBarOwner!

  """Update a #beach_bar's owner info"""
  updateBeachBarOwner(beachBarId: ID!, userId: ID, publicInfo: Boolean, isPrimary: Boolean = false): UpdateBeachBarOwner!

  """Delete (remove) an owner from a #beach_bar"""
  deleteBeachBarOwner(beachBarId: ID!, userId: ID): DeleteResult!

  """Make a payment using a customer's shopping cart"""
  checkout(
    """The ID value of the shopping cart with the products to purchase"""
    cartId: ID!

    """The ID value of the credit or debit card of the customer"""
    cardId: ID!

    """How many people will visit the #beach_bar(s)?. Defaults to true"""
    totalPeople: Int = 1

    """
    A coupon or offer campaign code to make a discount to the payment's price
    """
    voucherCode: String
  ): Payment!

  """Refund a payment"""
  refundPayment(
    """The ID of the payment to refund"""
    paymentId: ID!
  ): Delete!

  """Update a previous user's search"""
  updateSearch(
    """The ID value of a previous user search"""
    searchId: ID!

    """
    A list with the filter IDs to add in the search, found in the documentation
    """
    filterIds: [String!]
  ): UserSearch!

  """Update a user's #beach_bar favourites list"""
  updateFavouriteBeachBar(
    """
    The slug of the #beach_bar, to add / remove from the user's favourites list
    """
    slug: ID!
  ): UpdateUserFavoriteBar!

  """Remove a #beach_bar from a user's favorites list"""
  deleteUserFavoriteBar(
    """The ID value of the #beach_bar, to add to the user's favorites list"""
    beachBarId: Int!
  ): DeleteResult! @deprecated(reason: "You should use the `updateUserFavoriteBar` mutation operation, which handles automatically the creation and removement of a user's #beach_bar")

  """Sign up a user"""
  signUp(
    """Credential for signing up a user"""
    userCredentials: UserCredentials!

    """Wether to sign up an owner for a #beach_bar"""
    isPrimaryOwner: Boolean = false
  ): User!

  """Login a user"""
  login(
    """Credential for signing up a user"""
    userCredentials: UserCredentials!

    """User details"""
    loginDetails: UserLoginDetails
  ): UserLogin!

  """Logout a user"""
  logout: Success!

  """Sends a link to the user's email address to change its password"""
  sendForgotPasswordLink(
    """The email address of user"""
    email: Email!
  ): Success!

  """Change a user's password"""
  changeUserPassword(
    """Email of user to retrieve OAuth Client applications"""
    email: Email!

    """
    The token in the URL to identify and verify user. Each key lasts 20 minutes
    """
    token: String!

    """User's new password"""
    newPassword: String!
  ): Success!

  """Update a user's info"""
  updateUser(
    email: Email
    firstName: String
    lastName: String
    imgUrl: URL

    """The honorific title of the user"""
    honorificTitle: String

    """User's birthday in the date format"""
    birthday: String

    """The country of user"""
    countryId: ID

    """The city or hometown of user"""
    city: String

    """The phone number of user"""
    phoneNumber: String

    """The country of user's phone number"""
    telCountryId: ID

    """User's house or office street address"""
    address: String

    """User's house or office zip code"""
    zipCode: String

    """Indicates if to track user's history"""
    trackHistory: Boolean
  ): UserUpdate!
}

"""User info to be returned on Google OAuth authorization"""
type OAuthAuthorization {
  """The JWT access token to be returned upon successful login"""
  accessToken: String!

  """A boolean that indicates if the user has successfully signed up"""
  signedUp: Boolean!

  """A boolean that indicates if the user has successfully logined"""
  logined: Boolean!

  """The user being authorized"""
  user: User!
}

"""Represents a user that is an owner of a #beach_bar"""
type Owner {
  id: ID!

  """The user that is the owner or one of the owners of the #beach_bar"""
  user: User!
}

"""Represents a #beach_bar's owner"""
type BeachBarOwner {
  """
  A boolean that indicates if the owner is the user that also created the #beach_bar & can make modifications
  """
  isPrimary: Boolean!

  """
  A boolean that indicates if the owner info (contact details) are allowed to be presented to the public
  """
  publicInfo: Boolean!

  """
  The #beach_bar the user is assigned to as an owner, either as a primary one or not
  """
  beachBar: BeachBar!

  """The owner of the #beach_bar"""
  owner: Owner!

  """The date and time the owner was added (assigned) to the #beach_bar"""
  timestamp: DateTime!
}

"""Info to be returned when an owner is added (assigned) to a #beach_bar"""
type AddBeachBarOwner {
  """The owner being added & its info"""
  owner: BeachBarOwner

  """
  A boolean that indicates if the owner has been successfully being added (assigned) to a #beach_bar
  """
  added: Boolean
}

"""Info to be returned when the info of a #beach_bar owner, are updated"""
type UpdateBeachBarOwner {
  """The owner being added & its info"""
  owner: BeachBarOwner!

  """
  A boolean that indicates if the owner info have been successfully updated
  """
  updated: Boolean!
}

"""Represents a reserved product"""
type ReservedProduct {
  id: BigInt!
  date: Date!

  """A boolean that indicates if the product was refunded from the payment"""
  isRefunded: Boolean!

  """The hour (time) that this product was reserved for"""
  time: HourTime!

  """The product that is reserved"""
  product: Product!

  """The payment that this product was reserved by"""
  payment: Payment!
}

"""
Info to be returned when a product is marked (added) as a reserved one from a payment
"""
type AddReservedProduct {
  """The product that is marked as a reserved one"""
  reservedProduct: ReservedProduct!

  """
  A boolean that indicates if the product has been successfully marked as a reserved one
  """
  added: Boolean!
}

union AddReservedProductResult = AddReservedProduct | Error

"""Info to be returned when a reserved product details are updated"""
type UpdateReservedProduct {
  """The reserved product that is updated"""
  reservedProduct: ReservedProduct!

  """
  A boolean that indicates if the reserved product details have been successfully updated
  """
  updated: Boolean!
}

union UpdateReservedProductResult = UpdateReservedProduct | Error

"""Represents the offer codes added to a payment"""
type PaymentOfferCode {
  id: ID!

  """The payment that holds these offer codes"""
  payment: Payment!

  """A coupon code added to the payment"""
  couponCode: CouponCode

  """A campaign offer code added to the payment"""
  offerCode: OfferCampaignCode
}

"""Represents a payment"""
type Payment {
  id: ID!

  """A unique identifier (referral code) of the payment"""
  refCode: String!

  """Stripe's ID value of the payment"""
  stripeId: String!

  """A boolean that indicates if the whole payment was refunded"""
  isRefunded: Boolean!

  """The shopping cart this payment is associated to"""
  cart: Cart!

  """The credit or debit card this payment is associated to"""
  card: Card!

  """The status of the payment"""
  status: PaymentStatus!

  """
  A coupon or an offer campaign code used, to apply a discount, at this payment
  """
  voucherCode: PaymentOfferCode

  """A list with all the reserved products of the payment"""
  reservedProducts: [ReservedProduct!]

  """The timestamp recorded, when the payment was created / paid"""
  timestamp: DateTime!
}

"""Info to be returned when a payment is created (made)"""
type AddPayment {
  """The payment that is created (made)"""
  payment: Payment!

  """
  A boolean that indicates if the payments have been successfully created (made)
  """
  added: Boolean!
}

union AddPaymentResult = AddPayment | Error

type Visit {
  isUpcoming: Boolean!
  isRefunded: Boolean!
  time: HourTime!
  date: Date!
  payment: Payment!
}

"""Represents a payment as a user's visit"""
type PaymentVisits {
  beachBar: BeachBar!
  visits: [Visit!]!
}

"""Represents a user's payment visit month and years list"""
type PaymentVisitsDates {
  month: MonthTime!
  year: Int!
}

"""Query"""
type Query {
  hello: String!

  """Get the product offer or coupon, based on its referral code"""
  getVoucherCode(
    """The referral code of the product offer or coupon"""
    refCode: String!
  ): VoucherCodeQueryResult!

  """Get a list with all the offer campaigns of a #beach_bar"""
  getBeachBarOfferCampaigns(beachBarId: Int!): [OfferCampaign!]!

  """Get a coupon's code details & its referral code"""
  revealCouponCode(couponCodeId: ID!): CouponCodeReveal!

  """Get an offer's campaign code details + its referral code"""
  revealOfferCampaignCode(offerCampaignCodeId: ID!): OfferCampaignCodeReveal!

  """Get all products of a #beach_bar"""
  beachBarProducts(
    beachBarId: ID!

    """A boolean that indicates to retrieve only active products"""
    isActive: Boolean = true

    """
    A boolean that indicates to retrieve deleted products too. Its default value is set to false
    """
    isDeleted: Boolean = false
  ): [Product!]!

  """Fetch a list with all the available hour times of a product"""
  getProductAvailabilityHours(
    productId: ID!

    """The date to search availability for"""
    date: Date!
  ): [ProductAvailabilityHour!]!
  getProductAvailabilityQuantity(
    productId: ID!

    """The date to search availability for"""
    date: Date!

    """The ID value of the hour time to search availability for"""
    timeId: Int!
  ): Int!

  """Get a list with all the hours this product has reservation limits"""
  hasProductReservationLimit(
    productId: ID!

    """
    The date to purchase the product. Its default value its the current date
    """
    date: Date!
  ): [AvailableProduct!]!

  """Get the details of a #beach_bar"""
  beachBar(
    slug: String!

    """
    Indicates if to retrieve information for user search. Its default value is set to true
    """
    userVisit: Boolean = true
  ): BeachBar

  """Get the images of a #beach_bar"""
  beachBarImgs(slug: String!): [BeachBarImgUrl!]

  """Check a #beach_bar's availability"""
  checkBeachBarAvailability(beachBarId: ID!, availability: SearchInput!): BeachBarAvailability!

  """Get a list with a #beach_bar's available products"""
  availableProducts(beachBarId: ID!, availability: SearchInput!): [ProductAvailability!]!

  """A list with all the available #beach_bars"""
  getAllBeachBars: [BeachBar!]!

  """
  A list with all the #beach_bars, related to a user or are top selections
  """
  getPersonalizedBeachBars: [BeachBar!]!

  """A list with 6 #beach_bars, near to the user's location"""
  nearBeachBars(
    """The latitude of the user's location"""
    latitude: String!

    """The longitude of the user's location"""
    longitude: String!
  ): [BeachBar!]!

  """Get a list with all the months in a review, by the product purchase"""
  getPaymentProductsMonth(
    beachBarId: ID!

    """The referral code of the customer payment, to find"""
    refCode: String
  ): [MonthTime!]

  """Get a list of all the reviews of an authenticated user"""
  userReviews: [BeachBarReview!]!

  """Get the details of a a review of an authenticated user"""
  review(reviewId: ID!): BeachBarReview!
  cartEntryFees(
    """The ID values of the shopping cart"""
    cartId: ID!

    """How many people will visit the #beach_bar"""
    totalPeople: Int!
  ): Float!
  verifyZeroCartTotal(cartId: ID!): Boolean!

  """Get the latest cart of an authenticated user or create one"""
  cart(
    """The ID values of the shopping cart, if it is created previously"""
    cartId: ID
  ): Cart!

  """
  Get a list with all the payments methods (credit / debit cards) of the current authenticated user
  """
  customerPaymentMethods: [Card!]!

  """
  Get or create a customer, depending on current authenticated or not user
  """
  customer(
    """The email address of an authenticated or not user"""
    email: Email

    """The phone number of the customer"""
    phoneNumber: String

    """The ID value of the country of customer's telephone"""
    countryId: ID
  ): AddCustomer!

  """
  Returns the URL where the #beach_bar (owner) will be redirected to authorize and register with Stripe, for its connect account
  """
  getStripeConnectOAuthUrl: URL

  """Returns the URL where the user will be redirected to login with Google"""
  getGoogleOAuthUrl: URL!

  """
  Returns the URL where the user will be redirected to login with Facebook
  """
  getFacebookOAuthUrl: URL!

  """
  Returns the URL where the user will be redirected to login with Instagram
  """
  getInstagramOAuthUrl: URL!

  """
  Get a list of payments for a specific / latest month of an authenticated user
  """
  payments(
    """The ID of the month of the payments to fetch"""
    monthId: ID

    """The year of the payments to fetch"""
    year: Int
  ): [PaymentVisits!]!

  """Get the details of a specific payment / trip"""
  payment(
    """The referral code of the payment to fetch"""
    refCode: String!
  ): Payment!

  """Get the amount of refund of a specific payment / trip"""
  paymentRefundAmount(
    """The referral code of the payment to fetch"""
    refCode: String!
  ): Float!

  """
  Get a list with the months and years of the cart products in all the payments of an authenticated user
  """
  paymentDates: [PaymentVisitsDates!]!

  """Returns a list of formatted search input values"""
  searchInputValues: [SearchInputValue!]!

  """Get a list with a user's latest searches"""
  userSearches(
    """How many data to fetch?"""
    limit: Int
  ): [UserSearch!]!

  """Search for available #beach_bars"""
  search(
    """The ID value of the search input value, found in the documentation"""
    inputId: ID

    """The search input value, found in the documentation"""
    inputValue: String
    availability: SearchInput

    """The ID value of a previous user search"""
    searchId: ID

    """
    A list with the filter IDs to add in the search, found in the documentation
    """
    filterIds: [String!]

    """
    A ID of the sort filter the user has selected, found in the documentation
    """
    sortId: ID
  ): Search!

  """Returns a list of user's recorded / saved history"""
  userHistory: [UserHistoryExtended!]!

  """Get a user's favourite #beach_bars list"""
  favouriteBeachBars(
    """How many data to fetch?"""
    limit: Int
  ): [UserFavoriteBar!]!
  accessToken: String!

  """Returns current authenticated user"""
  me: User
}

"""Represents a user search"""
type UserSearch {
  id: ID!
  searchDate: Date!
  searchAdults: Int!
  searchChildren: Int

  """The user that made the search"""
  user: User

  """The input value that the user searched for"""
  inputValue: SearchInputValue!

  """A sort filter used by the user, in its search"""
  filters: [SearchFilter!]!

  """The input value that the user searched for"""
  sort: SearchSort
  updatedAt: DateTime!
  timestamp: DateTime!
}

"""Represents a type of user's search sort filter"""
type SearchSort {
  id: ID!
  name: String!
}

"""Represents the info (results) to be returned on user search"""
type SearchResultType {
  """The #beach_bar found in the search"""
  beachBar: BeachBar!
  availability: BeachBarAvailability!
}

"""
Represents the info to be returned when a user searches for (availability) at #beach_bars
"""
type Search {
  """The results of the user search"""
  results: [SearchResultType!]!

  """The details of the search, made by a user"""
  search: UserSearch!
}

"""The arguments (args) used at #beach_bar search or availability"""
input SearchInput {
  """The date to search availability at #beach_bars"""
  date: Date!

  """The ID value of the hour time to search availability for"""
  timeId: ID

  """
  The number of adults to search availability at #beach_bars. Its value should be less or equal to 12 adults
  """
  adults: Int!

  """
  The number of children to search availability at #beach_bars. Its value should be less or equal to 8 children
  """
  children: Int
}

"""Represents a potential input value of a user's search"""
type SearchInputValue {
  id: ID!

  """A unique identifier (ID) for public use"""
  publicId: String!

  """The search input value formatted into a string"""
  formattedValue: String!

  """The country of the input value"""
  country: Country

  """The city of the input value"""
  city: City

  """The region of the input value"""
  region: Region

  """The #beach_bar of the input value"""
  beachBar: BeachBar
}

"""
Represents a filter used by users when searching for (availability at) #beach_bars
"""
type SearchFilter {
  id: ID!

  """A unique identifier (ID) for public use"""
  publicId: String!
  name: String!

  """
  A short description about the filter, what is its value, and when to use
  """
  description: String
}

"""The base of a GraphQL Node"""
interface Node {
  id: ID!
}

"""Represents a user's uploaded file"""
type File {
  """A string representing the name of the uploaded file"""
  filename: String!

  """
  A string representing the MIME type of the uploaded file, such as image/jpeg
  """
  mimetype: String!

  """A string representing the file encoding, such as 7bit"""
  encoding: String!
}

"""Info to be returned upon successful operation"""
type Success {
  """A boolean that indicates if the operation was successful"""
  success: Boolean!
}

"""Info to be returned upon successful UPDATE operation"""
interface Update {
  """A boolean that indicates if the information were updated"""
  updated: Boolean!
}

union SuccessResult = Success | Error

"""Info to be returned upon successful deletion"""
type Delete {
  """A boolean that indicates if the delete operation was successful"""
  deleted: Boolean!
}

union DeleteResult = Delete | Error

"""The timestamp of when something was created"""
interface Timestamp {
  timestamp: DateTime!
}

"""Represents a user's account"""
type UserAccount {
  """The ID value of the user's account"""
  id: ID!

  """
  The user's honorific title. Its value can be null or 'Mr', 'Mrs', 'Ms', 'Miss', 'Sr', 'Dr', 'Lady'
  """
  honorificTitle: String

  """The URL value of user's account profile picture"""
  imgUrl: String

  """User's birthday date"""
  birthday: Date

  """User's age"""
  age: Int

  """The house of office street address of the user"""
  address: String

  """The zip code of the house or office street address of the user"""
  zipCode: String

  """The city of the user"""
  city: String

  """The phone number of the user"""
  phoneNumber: String

  """The user info of the particular account"""
  user: User!

  """The country of the user"""
  country: Country

  """The country of the user's phone number"""
  telCountry: Country

  """Indicates if to track some of user's actions"""
  trackHistory: Boolean!
}

"""Represents the type of action a user made"""
type UserHistoryActivity {
  id: ID!
  name: String!
}

"""Represents a user's recorded / saved action"""
type UserHistory implements Timestamp {
  timestamp: DateTime!
  id: ID!

  """The action type of the user"""
  activity: UserHistoryActivity!

  """The ID of what the user accessed"""
  objectId: ID!

  """The user that made the recorded / saved action"""
  user: User!
}

"""Represents a user's action, with details about the objectId"""
type UserHistoryExtended {
  """The info of the recorded / saved action of the user"""
  userHistory: UserHistory!

  """Details about the #beach_bar the user may have visited"""
  beachBar: BeachBar

  """Details about what the user searched"""
  search: UserSearch
}

"""A user's favorite #beach_bar"""
type UserFavoriteBar {
  """The user object"""
  user: User!

  """One of user's favorite #beach_bar"""
  beachBar: BeachBar!
}

"""Info to be returned when a user's #beach_bar favourite list is updated"""
type UpdateUserFavoriteBar {
  """The #beach_bar that is added / removed"""
  favouriteBar: UserFavoriteBar!

  """
  A boolean that indicates if the user's favorites #beach_bar list is updated
  """
  updated: Boolean!
}

"""Represents a user"""
type User {
  """User's ID value"""
  id: ID!

  """User's email address"""
  email: Email!

  """User's first (given) name"""
  firstName: String

  """User's last (family) name"""
  lastName: String

  """User's first and last name combines"""
  fullName: String

  """User's account info"""
  account: UserAccount!

  """A user's review on a #beach_bar"""
  reviews: [BeachBarReview!]!

  """A list with all the user's favorite #beach_bars"""
  favoriteBars: [UserFavoriteBar!]!

  """A list of all the votes of the user"""
  reviewVotes: [ReviewVote!]!
}

union UserTypeResult = User | Error

"""User info to be returned on login"""
type UserLogin {
  """The user (object) that logins"""
  user: User!

  """The access token to authenticate & authorize the user"""
  accessToken: String!
}

"""Credentials of user to sign up / login"""
input UserCredentials {
  """Email of user to sign up"""
  email: Email!

  """Password of user"""
  password: String!
}

"""User details in login. The user's IP address is passed via the context"""
input UserLoginDetails {
  """The city name from where user logins from"""
  city: String

  """The alpha 2 code of the country, from where the user logins"""
  countryAlpha2Code: String
}

"""User details to be returned on update"""
type UserUpdate implements Update {
  """A boolean that indicates if the information were updated"""
  updated: Boolean!
  user: User!
}

"""Represents a country's or city's region"""
type Region {
  id: ID!
  name: String!

  """The country the region is located at"""
  country: Country!

  """The city the region is located at"""
  city: City
}

"""The style of a #beach_bar"""
type BeachBarStyle {
  id: ID!
  name: String!
}

generator client {
  provider = "prisma-client-js"
}

generator nexusPrisma {
  provider = "nexus-prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id             Int                   @id @default(autoincrement())
  userId         Int                   @unique @default(autoincrement()) @map("user_id")
  honorificTitle PersonHonorificTitle? @map("honorific_title")
  imgUrl         String?               @map("img_url")
  birthday       DateTime?             @db.Date
  age            Int?                  @db.SmallInt
  isActive       Boolean               @default(true) @map("is_active")
  updatedAt      DateTime              @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  timestamp      DateTime              @default(now()) @db.Timestamptz(6)
  deletedAt      DateTime?             @map("deleted_at") @db.Timestamptz(6)
  countryId      Int?                  @map("country_id")
  cityId         Int?                  @map("city_id")
  address        String?               @db.VarChar(100)
  zipCode        String?               @map("zip_code") @db.VarChar(12)
  trackHistory   Boolean               @default(true) @map("track_history")
  city           String?               @db.VarChar(255)
  phoneNumber    String?               @map("phone_number") @db.VarChar(20)
  telCountryId   Int?                  @map("tel_country_id")
  country        Country?              @relation("account_country_idTocountry", fields: [countryId], references: [id], onUpdate: NoAction)
  telCountry     Country?              @relation("account_tel_country_idTocountry", fields: [telCountryId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user           User                  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  loginDetails   LoginDetails[]
  // userContactDetails UserContactDetails[] @ingore

  // @@map("account")
  @@map("account_view")
}

model AppTransaction {
  id                   BigInt   @id @default(autoincrement())
  paymentId            BigInt   @map("payment_id")
  beachBarId           Int      @map("beach_bar_id")
  net                  Decimal  @db.Decimal(12, 2)
  appFee               Decimal  @map("app_fee") @db.Decimal(12, 2)
  stripeProccessingFee Decimal  @map("stripe_proccessing_fee") @db.Decimal(12, 2)
  updatedAt            DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  timestamp            DateTime @default(now()) @db.Timestamptz(6)
  beachBar             BeachBar @relation(fields: [beachBarId], references: [id], onUpdate: NoAction)
  payment              Payment  @relation(fields: [paymentId], references: [id], onUpdate: NoAction)

  @@map("app_transaction")
}

model AwsS3Bucket {
  id                      Int    @id @default(autoincrement())
  name                    String @unique @db.VarChar(255)
  region                  String @db.VarChar(25)
  signatureVersion        String @map("signature_version") @db.VarChar(2)
  urlExpiration           Int    @map("url_expiration") @db.SmallInt
  keyLength               Int    @map("key_length") @db.SmallInt
  keyAndFilenameSeparator String @map("key_and_filename_separator") @db.VarChar(5)
  tableName               String @unique @map("table_name") @db.VarChar(255)

  @@map("aws_s3_bucket")
}

model BeachBar {
  id                        Int       @id @default(autoincrement())
  name                      String    @unique @db.VarChar(255)
  description               String?
  avgRating                 Decimal?  @map("avg_rating") @db.Decimal(2, 1)
  isActive                  Boolean   @default(false) @map("is_active")
  updatedAt                 DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  timestamp                 DateTime  @default(now()) @db.Timestamptz(6)
  deletedAt                 DateTime? @map("deleted_at") @db.Timestamptz(6)
  feeId                     Int       @map("fee_id")
  currencyId                Int       @map("currency_id")
  thumbnailUrl              String?   @map("thumbnail_url")
  stripeConnectId           String    @map("stripe_connect_id") @db.VarChar(255)
  zeroCartTotal             Boolean   @map("zero_cart_total")
  displayRegardlessCapacity Boolean   @default(false) @map("display_regardless_capacity")
  openingTimeId             Int       @map("opening_time_id")
  closingTimeId             Int       @map("closing_time_id")
  isManuallyControlled      Boolean   @default(false) @map("is_manually_controlled")
  contactPhoneNumber        String    @map("contact_phone_number") @db.VarChar(20)
  hidePhoneNumber           Boolean   @default(false) @map("hide_phone_number")
  categoryId                Int       @map("category_id")
  slug                      String    @unique @db.VarChar(255)
  entryFee                  Decimal?  @map("entry_fee") @db.Decimal(5, 2)
  hasCompletedSignUp        Boolean?  @default(false) @map("has_completed_sign_up")

  category          BeachBarCategory     @relation(fields: [categoryId], references: [id], onUpdate: NoAction)
  currency          Currency             @relation(fields: [currencyId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  openingTime       HourTime             @relation("beach_bar_opening_time_idTohour_time", fields: [openingTimeId], references: [id], onUpdate: NoAction)
  closingTime       HourTime             @relation("beach_bar_closing_time_idTohour_time", fields: [closingTimeId], references: [id], onUpdate: NoAction)
  appFee            AppFee               @relation(fields: [feeId], references: [id], onUpdate: NoAction)
  appTransactions   AppTransaction[]
  entryFees         BeachBarEntryFee[]   @ignore // @deprecated
  features          BeachBarFeature[]
  imgUrls           BeachBarImgUrl[]
  location          BeachBarLocation?
  owners            BeachBarOwner[]
  restaurants       BeachBarRestaurant[]
  reviews           BeachBarReview[]
  styles            BeachBarStyle[]      @relation("beach_bar_type")
  cartNotes         CartNote[]
  couponCodes       CouponCode[]
  foods             Food[]
  products          Product[]
  searchInputValues SearchInputValue[]
  userFavoriteBars  UserFavoriteBar[]

  // @@map("beach_bar")
  @@map("beach_bar_view")
}

model BeachBarCategory {
  id          Int        @id @default(autoincrement())
  name        String     @unique @db.VarChar(255)
  description String?
  beachBars   BeachBar[]

  @@map("beach_bar_category")
}

// @deprecated in favor of "entryFee" in BeachBar
model BeachBarEntryFee {
  id         BigInt    @id @default(autoincrement())
  fee        Decimal   @db.Decimal(5, 2)
  beachBarId Int       @map("beach_bar_id")
  date       DateTime  @db.Date
  updatedAt  DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  timestamp  DateTime  @default(now()) @db.Timestamptz(6)
  deletedAt  DateTime? @map("deleted_at") @db.Timestamptz(6)
  beachBar   BeachBar  @relation(fields: [beachBarId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("beach_bar_entry_fee")
  @@ignore
}

model BeachBarFeature {
  id          BigInt          @id(map: "beach_bar_feature_pkey1") @default(autoincrement())
  quantity    Int             @default(1) @db.SmallInt
  description String?
  beachBarId  Int             @map("beach_bar_id")
  serviceId   Int             @map("service_id")
  timestamp   DateTime        @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime        @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  deletedAt   DateTime?       @map("deleted_at") @db.Timestamptz(6)
  beachBar    BeachBar        @relation(fields: [beachBarId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "service_beach_bar_beach_bar_id_fkey")
  service     BeachBarService @relation(fields: [serviceId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "service_beach_bar_feature_id_fkey")

  // @@map("beach_bar_feature")
  @@map("beach_bar_feature_view")
}

model BeachBarImgUrl {
  id          BigInt    @id @default(autoincrement())
  beachBarId  Int       @map("beach_bar_id")
  imgUrl      String    @map("img_url")
  description String?
  updatedAt   DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  timestamp   DateTime  @default(now()) @db.Timestamptz(6)
  deletedAt   DateTime? @map("deleted_at") @db.Timestamptz(6)
  beachBar    BeachBar  @relation(fields: [beachBarId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  // @@map("beach_bar_img_url")
  @@map("beach_bar_img_url_view")
}

model BeachBarLocation {
  id         Int                      @id @default(autoincrement())
  address    String                   @db.VarChar(100)
  zipCode    String?                  @map("zip_code") @db.VarChar(12)
  latitude   Decimal                  @db.Decimal(10, 6)
  longitude  Decimal                  @db.Decimal(10, 6)
  whereIs    Unsupported("geography") @default(dbgenerated("ST_POINT(0, 0)")) @map("where_is")
  countryId  Int                      @map("country_id")
  cityId     Int                      @map("city_id")
  regionId   Int?                     @map("region_id")
  beachBarId Int                      @unique @map("beach_bar_id")
  timestamp  DateTime                 @default(now()) @db.Timestamptz(6)
  updatedAt  DateTime                 @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  deletedAt  DateTime?                @map("deleted_at") @db.Timestamptz(6)
  beachBar   BeachBar                 @relation(fields: [beachBarId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  city       City                     @relation(fields: [cityId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  country    Country                  @relation(fields: [countryId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  region     Region?                  @relation(fields: [regionId], references: [id], onUpdate: NoAction)

  // @@map("beach_bar_location")
  @@map("beach_bar_location_view")
}

model BeachBarOwner {
  id         Int       @id @default(autoincrement())
  ownerId    Int       @map("owner_id")
  beachBarId Int       @map("beach_bar_id")
  deletedAt  DateTime? @map("deleted_at") @db.Timestamptz(6)
  updatedAt  DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  timestamp  DateTime  @default(now()) @db.Timestamptz(6)
  isPrimary  Boolean   @default(false) @map("is_primary")
  publicInfo Boolean?  @default(true) @map("public_info")
  beachBar   BeachBar  @relation(fields: [beachBarId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "owner_beach_bar_beach_bar_id_fkey")
  owner      Owner     @relation(fields: [ownerId], references: [id], onUpdate: NoAction, map: "owner_beach_bar_user_id_fkey")

  // @@map("beach_bar_owner")
  @@map("beach_bar_owner_view")
}

model BeachBarRestaurant {
  id          Int                  @id @default(autoincrement())
  name        String               @db.VarChar(255)
  description String?
  beachBarId  Int                  @map("beach_bar_id")
  isActive    Boolean              @default(true) @map("is_active")
  updatedAt   DateTime             @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  timestamp   DateTime             @default(now()) @db.Timestamptz(6)
  deletedAt   DateTime?            @map("deleted_at") @db.Timestamptz(6)
  beachBar    BeachBar             @relation(fields: [beachBarId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  foodItems   RestaurantFoodItem[]

  // @@map("beach_bar_restaurant")
  @@map("beach_bar_restaurant_view")
}

model BeachBarReview {
  id              BigInt           @id @default(autoincrement())
  beachBarId      Int              @map("beach_bar_id")
  customerId      BigInt           @default(autoincrement()) @map("customer_id")
  paymentId       BigInt           @default(autoincrement()) @map("payment_id")
  ratingValue     Int              @map("rating_value") @db.SmallInt
  visitTypeId     Int?             @map("visit_type_id")
  monthId         Int?             @map("month_id")
  positiveComment String?          @map("positive_comment")
  negativeComment String?          @map("negative_comment")
  updatedAt       DateTime         @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  timestamp       DateTime         @default(now()) @db.Timestamptz(6)
  deletedAt       DateTime?        @map("deleted_at") @db.Timestamptz(6)
  body            String?
  answer          String?
  beachBar        BeachBar         @relation(fields: [beachBarId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  customer        Customer         @relation(fields: [customerId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  month           MonthTime?       @relation(fields: [monthId], references: [id], onDelete: Restrict, onUpdate: NoAction, map: "beach_bar_review_month_time_id_fkey")
  payment         Payment          @relation(fields: [paymentId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  visitType       ReviewVisitType? @relation(fields: [visitTypeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  votes           ReviewVote[]

  // @@map("beach_bar_review")
  @@map("beach_bar_review_view")
}

model BeachBarService {
  id       Int               @id(map: "beach_bar_feature_pkey") @default(autoincrement())
  name     String            @unique(map: "unique_feature_name") @db.VarChar(255)
  iconId   Int               @unique @map("icon_id")
  icon     Icon              @relation(fields: [iconId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  features BeachBarFeature[]

  @@map("beach_bar_service")
}

model BeachBarStyle {
  id        Int        @id @default(autoincrement())
  name      String     @unique @db.VarChar(255)
  beachBars BeachBar[] @relation("beach_bar_type")

  @@map("beach_bar_style")
}

// @deprecated: Use implicit many-to-many relation join table
model BeachBarType {
  // A
  beachBarId Int       @map("beach_bar_id")
  // B
  styleId    Int       @map("style_id")
  timestamp  DateTime  @default(now()) @db.Timestamptz(6)
  deletedAt  DateTime? @map("deleted_at") @db.Timestamp(6)
  // beachBar   BeachBar      @relation(fields: [beachBarId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  // style      BeachBarStyle @relation(fields: [styleId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  // @@map("beach_bar_type")
  @@unique([beachBarId, styleId])
  @@ignore
}

// Deprecated
model BundleProductComponent {
  productId   Int?              @map("product_id")
  componentId Int?              @map("component_id")
  quantity    Int               @default(1) @db.SmallInt
  timestamp   DateTime          @default(now()) @db.Timestamptz(6)
  deletedat   DateTime?         @map("deleted_at") @db.Timestamptz(6)
  omponent    ProductComponent? @relation(fields: [componentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  product     Product?          @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([productId, componentId])
  @@map("bundle_product_component")
  @@ignore
}

model Card {
  id             BigInt      @id @default(autoincrement())
  type           CardType    @default(unknown)
  brandId        Int?        @map("brand_id")
  countryId      Int?        @map("country_id")
  expMonth       Int?        @map("exp_month") @db.SmallInt
  expYear        Int?        @map("exp_year") @db.SmallInt
  last4          String      @map("last_4") @db.VarChar(4)
  cardholderName String      @map("cardholder_name") @db.VarChar(255)
  isDefault      Boolean     @default(false) @map("is_default")
  customerId     BigInt      @map("customer_id")
  stripeId       String      @map("stripe_id") @db.VarChar(255)
  updatedAt      DateTime    @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  timestamp      DateTime    @default(now()) @db.Timestamptz(6)
  deletedAt      DateTime?   @map("deleted_at") @db.Timestamptz(6)
  funding        CardFunding @default(unknown)
  isExpired      Boolean     @default(false) @map("is_expired")
  savedForFuture Boolean?    @default(false) @map("saved_for_future")

  brand    CardBrand? @relation(fields: [brandId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  country  Country?   @relation(fields: [countryId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  customer Customer   @relation(fields: [customerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  payments Payment[]

  // @@map("card")
  @@map("card_view")
}

model CardBrand {
  id   Int    @id @default(autoincrement())
  name String @unique @db.VarChar(35)
  card Card[]

  @@map("card_brand")
}

model Cart {
  id            BigInt    @id @default(autoincrement())
  userId        Int?      @map("user_id")
  total         Decimal   @default(0) @db.Decimal(12, 2)
  productstotal Decimal   @default(0) @map("products_total") @db.Decimal(12, 2)
  foodsTotal    Decimal   @default(0) @map("foods_total") @db.Decimal(12, 2)
  deletedAt     DateTime? @map("deleted_at") @db.Timestamptz(6)
  timestamp     DateTime  @default(now()) @db.Timestamptz(6)

  user               User?               @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  foods              CartFood[]
  notes              CartNote[]
  products           CartProduct[]
  payment            Payment?
  paymentWithDeleted PaymentWithDeleted?

  @@map("cart_view")
}

model CartFood {
  id        BigInt    @id @default(autoincrement())
  quantity  Int       @default(1) @db.SmallInt
  date      DateTime? @db.Date
  cartId    BigInt    @map("cart_id")
  foodId    BigInt    @map("food_id")
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  timestamp DateTime  @default(now()) @db.Timestamptz(6)
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz(6)

  cart Cart @relation(fields: [cartId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  food Food @relation(fields: [foodId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  // @@map("cart_food")
  @@map("cart_food_view")
}

model CartNote {
  id         BigInt   @id @default(autoincrement())
  body       String
  cartId     BigInt   @map("cart_id")
  beachBarId Int      @map("beach_bar_id")
  updatedAt  DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  timestamp  DateTime @default(now()) @db.Timestamptz(6)
  beachBar   BeachBar @relation(fields: [beachBarId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  cart       Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([cartId, beachBarId])
  @@map("cart_note")
}

model CartProduct {
  id          BigInt    @id @default(autoincrement())
  cartId      BigInt    @map("cart_id")
  productId   Int       @map("product_id")
  quantity    Int       @default(1) @db.SmallInt
  updatedAt   DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  timestamp   DateTime  @default(now()) @db.Timestamptz(6)
  deletedAt   DateTime? @map("deleted_at") @db.Timestamptz(6)
  date        DateTime  @default(dbgenerated("CURRENT_DATE")) @db.Date
  startTimeId Int       @map("start_time_id")
  endTimeId   Int       @map("end_time_id")
  people      Int       @db.SmallInt

  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  startTime HourTime @relation("cart_product_start_time", fields: [startTimeId], references: [id], onUpdate: NoAction, map: "cart_product_start_time_id_fkey")
  endTime   HourTime @relation("cart_product_end_time", fields: [endTimeId], references: [id], onUpdate: NoAction, map: "cart_product_end_time_id_fkey")
  // hourTime     hour_time @relation(fields: [start_time_id], references: [id], onUpdate: NoAction, map: "cart_product_time_id_fkey")

  // @@map("cart_product")
  @@map("cart_product_view")
}

model City {
  id                Int                @id @default(autoincrement())
  name              String             @unique @db.VarChar(100)
  countryId         Int                @map("country_id")
  country           Country            @relation(fields: [countryId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  // accounts          Account[]          @ignore // Deprecated
  beachBarLocations BeachBarLocation[]
  regions           Region[]
  searchInputValues SearchInputValue[]

  @@map("city")
}

model ClientBrowser {
  id           Int            @id @default(autoincrement())
  name         String         @unique @db.VarChar(20)
  loginDetails LoginDetails[]

  @@map("client_browser")
}

model ClientOs {
  id           Int            @id @default(autoincrement())
  name         String         @unique @db.VarChar(50)
  loginDetails LoginDetails[]

  @@map("client_os")
}

model Country {
  id                Int                @id @default(autoincrement())
  name              String             @unique @db.VarChar(100)
  callingCode       String             @map("calling_code") @db.VarChar(10)
  currencyId        Int                @map("currency_id")
  isEu              Boolean            @map("is_eu")
  alpha3Code        String             @unique(map: "country_two_letter_code_key") @map("alpha_3_code") @db.VarChar(3)
  alpha2Code        String             @unique @map("alpha_2_code") @db.VarChar(2)
  currency          Currency           @relation(fields: [currencyId], references: [id], onUpdate: NoAction)
  accounts          Account[]          @relation("account_country_idTocountry")
  accountsTel       Account[]          @relation("account_tel_country_idTocountry")
  beachBarLocations BeachBarLocation[]
  cards             Card[]
  cities            City[]
  customers         Customer[]
  loginDetails      LoginDetails[]
  region            Region[]
  searchInputValues SearchInputValue[]
  // UserContactDetails user_contact_details[]

  @@map("country")
}

model CouponCode {
  id                 BigInt    @id @default(autoincrement())
  title              String    @db.VarChar(255)
  refCode            String    @unique @map("ref_code") @db.VarChar(18)
  discountPercentage Decimal   @map("discount_percentage") @db.Decimal(3, 0)
  isActive           Boolean?  @default(false) @map("is_active")
  validUntil         DateTime? @map("valid_until") @db.Timestamptz(6)
  timesLimit         Int?      @map("times_limit") @db.SmallInt
  timesUsed          Int       @default(0) @map("times_used") @db.SmallInt
  updatedAt          DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  timestamp          DateTime  @default(now()) @db.Timestamptz(6)
  deletedAt          DateTime? @map("deleted_at") @db.Timestamptz(6)
  beachBarId         Int?      @map("beach_bar_id")
  beachBar           BeachBar? @relation(fields: [beachBarId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  payments           Payment[]

  @@map("coupon_code")
}

model Currency {
  id           Int        @id @default(autoincrement())
  name         String     @unique @db.VarChar(50)
  isoCode      String     @unique @map("iso_code") @db.VarChar(3)
  symbol       String     @db.VarChar(10)
  secondSymbol String?    @map("second_symbol") @db.VarChar(10)
  // currencyProductPrice currency_product_price?
  // pricingFeeCurrency   pricing_fee_currency?
  countries    Country[]
  beachBars    BeachBar[]
  products     Product[]
  // stripeFees           stripe_fee[]

  @@map("currency")
}

// Deprecated
model CurrencyProductPrice {
  id         Int      @id @default(autoincrement())
  currencyId Int      @unique @map("currency_id")
  price      Decimal  @db.Decimal(5, 2)
  updatedAt  DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  timestamp  DateTime @default(now()) @db.Timestamptz(6)
  // currency   Currency @relation(fields: [currencyId], references: [id], onDelete: NoAction, onUpdate: NoAction) @ignore

  @@map("currency_product_price")
  @@ignore
}

model Customer {
  id               BigInt    @id @default(autoincrement())
  email            String?   @db.VarChar(255)
  phoneNumber      String?   @map("phone_number") @db.VarChar(20)
  userId           Int?      @unique @map("user_id")
  stripeCustomerId String    @map("stripe_customer_id") @db.VarChar(255)
  countryId        Int?      @map("country_id")
  updatedAt        DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  deletedAt        DateTime? @map("deleted_at") @db.Timestamptz(6)
  timestamp        DateTime  @default(now()) @db.Timestamptz(6)

  country Country?         @relation(fields: [countryId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user    User?            @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  reviews BeachBarReview[]
  cards   Card[]

  // @@map("customer")
  @@map("customer_view")
}

model Food {
  id          BigInt    @id @default(autoincrement())
  name        String    @db.VarChar(255)
  ingredients String?   @db.VarChar(255)
  price       Decimal   @db.Decimal(5, 2)
  maxQuantity Int       @default(9) @map("max_quantity") @db.SmallInt
  categoryId  Int       @map("category_id") @db.SmallInt
  beachBarId  Int       @map("beach_bar_id")
  updatedAt   DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  deletedAt   DateTime? @map("deleted_at") @db.Timestamptz(6)
  timestamp   DateTime  @default(now()) @db.Timestamptz(6)

  beachBar BeachBar     @relation(fields: [beachBarId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  category FoodCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  carts    CartFood[]

  // @@map("food")
  @@map("food_view")
}

model FoodCategory {
  id     Int    @id @default(autoincrement())
  name   String @unique @db.VarChar(50)
  iconId Int    @unique @map("icon_id") @db.SmallInt
  icon   Icon   @relation(fields: [iconId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  foods  Food[]

  @@map("food_category")
}

model HourTime {
  id                                Int                       @id @default(autoincrement())
  value                             DateTime                  @unique @db.Time(0)
  beachBarsOpeningTime              BeachBar[]                @relation("beach_bar_opening_time_idTohour_time")
  beachBarsClosingTime              BeachBar[]                @relation("beach_bar_closing_time_idTohour_time")
  cartProductStartTimes             CartProduct[]             @relation("cart_product_start_time")
  cartProductEndTimes               CartProduct[]             @relation("cart_product_end_time")
  productReservationLimitStartTimes ProductReservationLimit[] @relation("hour_timeToproduct_reservation_limit_start_time_id")
  productReservationLimitEndTimes   ProductReservationLimit[] @relation("hour_timeToproduct_reservation_limit_end_time_id")
  reservedProductStartTimes         ReservedProduct[]         @relation("reserved_product_start_time")
  reservedProductEndTimes           ReservedProduct[]         @relation("reserved_product_end_time")

  @@map("hour_time")
}

model Icon {
  id               Int               @id @default(autoincrement())
  publicId         String            @unique @map("public_id") @db.Char(3)
  name             String            @unique @db.VarChar(50)
  service          BeachBarService?
  foodCategory     FoodCategory?
  productComponent ProductComponent?

  @@map("icon")
}

model LoginDetails {
  id             BigInt             @id @default(autoincrement())
  accountId      Int                @map("account_id")
  status         LoginDetailsStatus
  osId           Int?               @map("os_id")
  browserId      Int?               @map("browser_id")
  countryId      Int?               @map("country_id")
  ipAddr         String?            @map("ip_addr")
  timestamp      DateTime?          @default(now()) @db.Timestamptz(6)
  platformId     Int?               @map("platform_id")
  city           String?            @db.VarChar(255)
  account        Account            @relation(fields: [accountId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  client_browser ClientBrowser?     @relation(fields: [browserId], references: [id], onUpdate: NoAction)
  country        Country?           @relation(fields: [countryId], references: [id], onUpdate: NoAction)
  clientOs       ClientOs?          @relation(fields: [osId], references: [id], onUpdate: NoAction)
  platform       LoginPlatform?     @relation(fields: [platformId], references: [id], onUpdate: NoAction)

  @@map("login_details")
}

model LoginPlatform {
  id           Int            @id @default(autoincrement())
  name         String         @unique @db.VarChar(25)
  urlHostname  String         @unique @map("url_hostname") @db.VarChar(255)
  loginDetails LoginDetails[]

  @@map("login_platform")
}

model MonthTime {
  id      Int              @id @default(autoincrement())
  value   String           @unique @db.VarChar(9)
  days    Int
  reviews BeachBarReview[]

  @@map("month_time")
}

model QuarterTime {
  id    Int      @id @default(autoincrement())
  value DateTime @unique @db.Time(0)

  @@map("quarter_time")
}

model OfferCampaign {
  id                 Int                    @id @default(autoincrement())
  title              String                 @db.VarChar(255)
  discountPercentage Decimal                @map("discount_percentage") @db.Decimal(3, 0)
  isActive           Boolean?               @default(false) @map("is_active")
  validUntil         DateTime?              @map("valid_until") @db.Timestamptz(6)
  updatedAt          DateTime               @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  timestamp          DateTime               @default(now()) @db.Timestamptz(6)
  deleted_at         DateTime?              @map("deleted_at") @db.Timestamptz(6)
  products           OfferCampaignProduct[] @relation
  codes              OfferCampaignCode[]

  @@map("offer_campaign")
}

model OfferCampaignCode {
  id         BigInt        @id @default(autoincrement())
  campaignId Int           @map("campaign_id")
  refCode    String        @unique @map("ref_coee") @db.VarChar(23)
  timesUsed  Int?          @default(0) @map("times_used") @db.SmallInt
  timestamp  DateTime      @default(now()) @db.Timestamptz(6)
  deletetAt  DateTime?     @map("deleted_at") @db.Timestamptz(6)
  campaign   OfferCampaign @relation(fields: [campaignId], references: [id])
  payments   Payment[]

  @@map("offer_campaign_code")
}

// Or create an "Implicit many-to-many relations" that will automatically create a join table
model OfferCampaignProduct {
  campaignId Int           @map("campaign_id")
  productId  Int           @map("product_id")
  campaign   OfferCampaign @relation(fields: [campaignId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  product    Product       @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([campaignId, productId], map: "offer_campaign_product_campaign_product_key")
  @@map("offer_campaign_product")
}

model Owner {
  id        Int       @id @default(autoincrement())
  userId    Int       @unique @map("user_id")
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz(6)
  timestamp DateTime  @default(now()) @db.Timestamptz(6)

  user         User                  @relation(fields: [userId], references: [id])
  owners       BeachBarOwner[]
  priceHistory ProductPriceHistory[]

  // @@map("owner")
  @@map("owner_view")
}

model Payment {
  id                   BigInt    @id @default(autoincrement())
  refCode              String    @unique @map("ref_code") @db.VarChar(16)
  stripeId             String    @map("stripe_id") @db.VarChar(255)
  isRefunded           Boolean   @default(false) @map("is_refunded")
  appFee               Decimal   @map("app_fee") @db.Decimal(12, 2)
  transferAmount       Decimal   @map("transfer_amount") @db.Decimal(12, 2)
  transferGroupCode    String    @unique @map("transfer_group_code") @db.VarChar(19)
  stripeProccessingFee Decimal   @map("stripe_proccessing_fee") @db.Decimal(12, 2)
  statusId             Int       @default(1) @map("status_id")
  cartId               BigInt    @unique @map("cart_id")
  cardId               BigInt    @map("card_id")
  couponCodeId         BigInt?   @map("coupon_code_id")
  offerCodeId          BigInt?   @map("offer_code_id")
  updatedAt            DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  deletedAt            DateTime? @map("deleted_at") @db.Date
  timestamp            DateTime  @default(now()) @db.Timestamptz(6)

  couponCode       CouponCode?        @relation(fields: [couponCodeId], references: [id], onUpdate: NoAction)
  offerCode        OfferCampaignCode? @relation(fields: [offerCodeId], references: [id], onUpdate: NoAction)
  cart             Cart               @relation(fields: [cartId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  card             Card               @relation(fields: [cardId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  status           PaymentStatus      @relation(fields: [statusId], references: [id], onUpdate: NoAction)
  appTransactions  AppTransaction[]
  reviews          BeachBarReview[]
  reservedProducts ReservedProduct[]

  // @@map("payment")
  @@map("payment_view")
}

model PaymentWithDeleted {
  id                   BigInt    @id @default(autoincrement())
  refCode              String    @unique @map("ref_code") @db.VarChar(16)
  stripeId             String    @map("stripe_id") @db.VarChar(255)
  isRefunded           Boolean   @default(false) @map("is_refunded")
  appFee               Decimal   @map("app_fee") @db.Decimal(12, 2)
  transferAmount       Decimal   @map("transfer_amount") @db.Decimal(12, 2)
  transferGroupCode    String    @unique @map("transfer_group_code") @db.VarChar(19)
  stripeProccessingFee Decimal   @map("stripe_proccessing_fee") @db.Decimal(12, 2)
  statusId             Int       @default(1) @map("status_id")
  cartId               BigInt    @unique @map("cart_id")
  cardId               BigInt    @map("card_id")
  couponCodeId         BigInt?   @map("coupon_code_id")
  offerCodeId          BigInt?   @map("offer_code_id")
  updatedAt            DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  deletedAt            DateTime? @map("deleted_at") @db.Timestamptz(6)
  timestamp            DateTime  @default(now()) @db.Timestamptz(6)

  // couponCode       CouponCode?        @relation(fields: [couponCodeId], references: [id], onUpdate: NoAction)
  // offerCode        OfferCampaignCode? @relation(fields: [offerCodeId], references: [id], onUpdate: NoAction)
  cart Cart @relation(fields: [cartId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  // card             Card               @relation(fields: [cardId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  // status           PaymentStatus      @relation(fields: [statusId], references: [id], onUpdate: NoAction)
  // appTransactions  AppTransaction[]
  // reviews          BeachBarReview[]
  // reservedProducts ReservedProduct[]

  // @@map("payment")
  @@map("payment")
}

model PaymentStatus {
  id       Int       @id @default(autoincrement())
  name     String    @unique(map: "payment_status_status_key") @db.VarChar(25)
  payments Payment[]

  @@map("payment_status")
}

model PaymentVoucherCode {
  id           BigInt   @id @default(autoincrement())
  paymentId    BigInt   @unique @map("payment_id")
  couponCodeId BigInt?  @map("coupon_code_id")
  offerCodeId  BigInt?  @map("offer_code_id")
  timestamp    DateTime @default(now()) @db.Timestamptz(6)
  // couponCode   CouponCode?        @relation(fields: [couponCodeId], references: [id], onUpdate: NoAction)
  // offerCode    OfferCampaignCode? @relation(fields: [offerCodeId], references: [id], onUpdate: NoAction)
  // payment      Payment            @relation(fields: [paymentId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("payment_voucher_code")
  @@ignore
}

// Should be fixed and replaced by a decimal field in "BeachBar"
model AppFee {
  id                    Int        @id @default(autoincrement())
  name                  String     @unique @db.VarChar(75)
  percentageValue       Decimal    @unique @map("percentage_value") @db.Decimal(4, 2)
  maxCapacityPercentage Decimal?   @unique(map: "pricing_fee_min_capacity_percentage_key") @map("max_capacity_percentage") @db.Decimal(4, 2)
  timestamp             DateTime   @default(now()) @db.Timestamptz(6)
  isManuallyControlled  Boolean    @default(false) @map("is_manually_controlled")
  beachBars             BeachBar[]

  @@map("pricing_fee")
}

// Check "AppFee" for more info
model PricingFeeCurrency {
  currencyId   Int      @id @map("currency_id")
  numericValue Decimal  @map("numeric_value") @db.Decimal(4, 2)
  timestamp    DateTime @default(now()) @db.Timestamptz(6)
  // currency     Currency @relation(fields: [currencyId], references: [id], onUpdate: NoAction) @ignore

  @@map("pricing_fee_currency")
  @@ignore
}

model Product {
  id              Int       @id @default(autoincrement())
  name            String    @db.VarChar(120)
  price           Decimal   @db.Decimal(5, 2)
  isActive        Boolean   @default(true) @map("is_active")
  description     String?
  isIndividual    Boolean   @map("is_individual")
  maxPeople       Int       @map("max_people")
  imgUrl          String?   @map("img_url")
  minFoodSpending Decimal?  @map("min_food_spending") @db.Decimal(5, 2)
  categoryId      Int       @map("category_id")
  beachBarId      Int       @map("beach_bar_id")
  currencyId      Int       @default(1) @map("currency_id")
  updatedAt       DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  deletedAt       DateTime? @map("deleted_at") @db.Timestamptz(6)
  timestamp       DateTime  @default(now()) @db.Timestamptz(6)

  beachBar               BeachBar                  @relation(fields: [beachBarId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  category               ProductCategory           @relation(fields: [categoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  currency               Currency                  @relation(fields: [currencyId], references: [id], onUpdate: NoAction)
  bundleProductComponent BundleProductComponent[]  @ignore // Deprecated
  carts                  CartProduct[]
  offerCampaigns         OfferCampaignProduct[]
  priceHistory           ProductPriceHistory[]
  reservationLimits      ProductReservationLimit[]
  reservedProducts       ReservedProduct[]

  // @@map("product")
  @@map("product_view")
}

model ProductCategory {
  id              Int                        @id @default(autoincrement())
  name            String                     @unique @db.VarChar(50)
  underscoredName String                     @unique @map("underscored_name") @db.VarChar(50)
  description     String?
  zeroPrice       Boolean                    @map("zero_price")
  whitelist       Boolean
  products        Product[]
  components      ProductCategoryComponent[]

  @@map("product_category")
}

model ProductCategoryComponent {
  categoryId  Int              @map("category_id")
  componentId Int              @map("component_id")
  quantity    Int              @default(1) @db.SmallInt
  category    ProductCategory  @relation(fields: [categoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  component   ProductComponent @relation(fields: [componentId], references: [id], onDelete: NoAction, onUpdate: NoAction)


  @@id([categoryId, componentId])
  @@map("product_category_component")
}

model ProductComponent {
  id                      Int                        @id @default(autoincrement())
  name                    String                     @unique(map: "product_component_title_key") @db.VarChar(50)
  iconId                  Int                        @unique @map("icon_id")
  icon                    Icon                       @relation(fields: [iconId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  bundleProductcomponents BundleProductComponent[]   @ignore // Deprecated
  categories              ProductCategoryComponent[]

  @@map("product_component")
}

model ProductPriceHistory {
  id         BigInt   @id @default(autoincrement())
  productId  Int      @map("product_id")
  ownerId    Int      @map("owner_id")
  diffAmount Decimal  @default(0) @map("diff_amount") @db.Decimal(5, 2)
  newPrice   Decimal  @map("new_price") @db.Decimal(5, 2)
  timestamp  DateTime @default(now()) @db.Timestamptz(6)
  owner      Owner    @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("product_price_history")
}

model ProductReservationLimit {
  id          BigInt    @id @default(autoincrement())
  limitNumber Int       @map("limit_number")
  from        DateTime  @db.Date
  to          DateTime  @db.Date
  productId   Int       @map("product_id")
  startTimeId Int?      @map("start_time_id")
  endTimeId   Int?      @map("end_time_id")
  updatedAt   DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  deletedAt   DateTime? @map("deleted_at") @db.Timestamptz(6)
  timestamp   DateTime  @default(now()) @db.Timestamptz(6)

  product   Product   @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  startTime HourTime? @relation("hour_timeToproduct_reservation_limit_start_time_id", fields: [startTimeId], references: [id], onDelete: Restrict, onUpdate: NoAction)
  endTime   HourTime? @relation("hour_timeToproduct_reservation_limit_end_time_id", fields: [endTimeId], references: [id], onDelete: Restrict, onUpdate: NoAction)

  // @@map("product_reservation_limit")
  @@map("product_reservation_limit_view")
}

model RefundPercentage {
  id               Int    @id @default(autoincrement())
  percentageValue  Int    @unique @map("percentage_value")
  daysLimit        Int    @unique @map("days_limit")
  daysMilliseconds BigInt @unique @map("days_milliseconds")

  @@map("refund_percentage")
}

// "refund_percentage_days_milliseconds_check" CHECK (days_milliseconds >= 86400000)

model Region {
  id                Int                @id @default(autoincrement())
  name              String             @db.VarChar(100)
  countryId         Int                @map("country_id")
  cityId            Int                @map("city_id")
  city              City               @relation(fields: [cityId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  country           Country            @relation(fields: [countryId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  beachBarLocations BeachBarLocation[]
  searchInputValues SearchInputValue[]

  @@map("region")
}

model ReservedProduct {
  id          BigInt    @id(map: "reserved_products_pkey") @default(autoincrement())
  date        DateTime  @db.Date
  isRefunded  Boolean   @default(false) @map("is_refunded")
  productId   Int       @map("product_id")
  paymentId   BigInt    @map("payment_id")
  startTimeId Int       @map("start_time_id")
  endTimeId   Int       @map("end_time_id")
  updatedAt   DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  deletedAt   DateTime? @map("deleted_at") @db.Timestamptz(6)
  timestamp   DateTime  @default(now()) @db.Timestamptz(6)

  payment   Payment  @relation(fields: [paymentId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "reserved_products_payment_id_fkey")
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "reserved_products_product_id_fkey")
  startTime HourTime @relation("reserved_product_start_time", fields: [startTimeId], references: [id], onUpdate: NoAction)
  endTime   HourTime @relation("reserved_product_end_time", fields: [endTimeId], references: [id], onUpdate: NoAction)
  // hourTime    HourTime  @relation(fields: [start_time_id], references: [id], onUpdate: NoAction, map: "reserved_product_time_id_fkey") @ignore

  // @@map("reserved_product")
  @@map("reserved_product_view")
}

model RestaurantFoodItem {
  id             BigInt    @id @default(autoincrement())
  name           String    @db.VarChar(255)
  price          Decimal   @db.Decimal(7, 2)
  imgUrl         String?   @map("img_url")
  menuCategoryId Int       @map("menu_category_id")
  restaurantId   Int       @map("restaurant_id")
  updatedAt      DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  deletedAt      DateTime? @map("deleted_at") @db.Timestamptz(6)
  timestamp      DateTime  @default(now()) @db.Timestamptz(6)

  menuCategory RestaurantMenuCategory @relation(fields: [menuCategoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  restaurant   BeachBarRestaurant     @relation(fields: [restaurantId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  // @@map("restaurant_food_item")
  @@map("restaurant_food_item_view")
}

model RestaurantMenuCategory {
  id        Int                  @id @default(autoincrement())
  name      String               @db.VarChar(255)
  foodItems RestaurantFoodItem[]

  @@map("restaurant_menu_category")
}

// Replaced by the "answer" attribute in the "BeachBarReview" model
model ReviewAnswer {
  id        BigInt    @id @default(autoincrement())
  reviewId  BigInt    @map("review_id")
  body      String
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  timestamp DateTime  @default(now()) @db.Timestamptz(6)
  deletedt  DateTime? @map("deleted_at") @db.Timestamptz(6)
  // review    BeachBarReview @relation(fields: [reviewId], references: [id], onDelete: Cascade, onUpdate: NoAction) @ignore

  @@map("review_answer")
  @@ignore
}

model ReviewVisitType {
  id      Int              @id @default(autoincrement())
  name    String           @unique(map: "unique_review_visit_type_name") @db.VarChar(255)
  reviews BeachBarReview[]

  @@map("review_visit_type")
}

model ReviewVote {
  id        BigInt    @id @default(autoincrement())
  reviewId  BigInt    @map("review_id")
  userId    Int       @map("user_id")
  typeId    Int       @map("type_id")
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz(6)
  timestamp DateTime  @default(now()) @db.Timestamptz(6)

  review BeachBarReview @relation(fields: [reviewId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  type   ReviewVoteType @relation(fields: [typeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user   User           @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  // @@map("review_vote")
  @@map("review_vote_view")
}

model ReviewVoteType {
  id    Int          @id @default(autoincrement())
  value String       @unique(map: "review_vote_type_type_key") @db.VarChar(255)
  votes ReviewVote[]

  @@map("review_vote_type")
}

model SearchFilter {
  id          Int                   @id @default(autoincrement())
  publicId    String                @unique @map("public_id") @db.VarChar(3)
  name        String                @unique @db.VarChar(255)
  description String?
  categories  SearchFilterSection[]
  userSeaches UserSearch[]          @relation("user_search_filter")

  @@map("search_filter")
}

model SearchFilterCategory {
  id          Int                   @id @default(autoincrement())
  name        String                @unique @db.VarChar(255)
  description String?
  filters     SearchFilterSection[]

  @@map("search_filter_category")
}

model SearchFilterSection {
  filterId   Int                  @map("filter_id")
  categoryId Int                  @map("category_id")
  filter     SearchFilter         @relation(fields: [filterId], references: [id], onUpdate: NoAction)
  category   SearchFilterCategory @relation(fields: [categoryId], references: [id], onUpdate: NoAction)

  @@unique([filterId, categoryId])
  @@map("search_filter_section")
}

model SearchInputValue {
  id         BigInt    @id @default(autoincrement())
  publicId   String    @unique @map("public_id") @db.VarChar(5)
  countryId  Int?      @map("country_id")
  cityId     Int?      @map("city_id")
  regionId   Int?      @map("region_id")
  beachBarId Int?      @unique @map("beach_bar_id")
  updatedAt  DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  deletedAt  DateTime? @map("deleted_at") @db.Timestamptz(6)
  timestamp  DateTime? @default(now()) @db.Timestamptz(6)

  beachBar BeachBar?    @relation(fields: [beachBarId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  city     City?        @relation(fields: [cityId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  country  Country?     @relation(fields: [countryId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  region   Region?      @relation(fields: [regionId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  searches UserSearch[]

  // @@map("search_input_value")
  @@unique([countryId, cityId, regionId])
  @@map("search_input_value_view")
}

model SearchSort {
  id           Int          @id(map: "search_sort_type_pkey") @default(autoincrement())
  name         String       @unique(map: "search_sort_type_name_key") @db.VarChar(255)
  userSearches UserSearch[]

  @@map("search_sort")
}

model spatial_ref_sys {
  srid      Int     @id
  auth_name String? @db.VarChar(256)
  auth_srid Int?
  srtext    String? @db.VarChar(2048)
  proj4text String? @db.VarChar(2048)

  @@ignore
}

model StripeFee {
  id              Int     @id @default(autoincrement())
  percentageValue Decimal @map("percentage_value") @db.Decimal(4, 2)
  pricingFee      Decimal @map("pricing_fee") @db.Decimal(4, 2)
  isEu            Boolean @map("is_eur")
  description     String  @unique
  currencyId      Int     @map("currency_id")
  // currency        Currency @relation(fields: [currencyId], references: [id], onUpdate: NoAction) @ignore

  @@unique([percentageValue, pricingFee, currencyId])
  @@map("stripe_fee")
}

/// This is a user!
model User {
  id                Int       @id @default(autoincrement())
  email             String    @unique @db.VarChar(255)
  firstName         String?   @map("first_name") @db.VarChar(255)
  lastName          String?   @map("last_name") @db.VarChar(255)
  tokenVersion      Int       @default(0) @map("token_version")
  hashtagId         BigInt?   @map("hashtag_id")
  googleId          String?   @map("google_id") @db.VarChar(255)
  facebookId        String?   @map("facebook_id") @db.VarChar(255)
  instagramId       String?   @map("instagram_id") @db.VarChar(255)
  instagramUsername String?   @map("instagram_username") @db.VarChar(35)
  updatedAt         DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  deletedAt         DateTime? @map("deleted_at") @db.Timestamptz(6)
  timestamp         DateTime  @default(now()) @db.Timestamptz(6)

  account      Account?
  carts        Cart[]
  customer     Customer?
  owner        Owner?
  reviewVotes  ReviewVote[]
  favoriteBars UserFavoriteBar[]
  history      UserHistory[]
  searches     UserSearch[]
  votes        Vote[]

  // @@map("user")
  @@map("user_view")
}

// Deprecated
// Replaced by inline attributes
model UserContactDetails {
  id             Int       @id @default(autoincrement())
  accountId      Int       @map("account_id")
  countryId      Int?      @map("country_id")
  phoneNumber    String?   @map("phone_number") @db.VarChar(20)
  deletedAt      DateTime? @map("deleted_at") @db.Timestamptz(6)
  updatedAt      DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  timestamp      DateTime? @default(now()) @db.Timestamptz(6)
  secondaryEmail String?   @map("secondary_email") @db.VarChar(255)
  // account        Account   @relation(fields: [accountId], references: [id], onUpdate: NoAction) @ignore
  // country        Country?  @relation(fields: [countryId], references: [id], onUpdate: NoAction) @ignore

  @@map("user_contact_details")
  @@ignore
}

model UserFavoriteBar {
  id         BigInt    @id @default(autoincrement())
  userId     Int       @map("user_id")
  beachBarId Int       @map("beach_bar_id")
  deletedAt  DateTime? @map("deleted_at") @db.Timestamptz(6)
  timestamp  DateTime? @default(now()) @db.Timestamptz(6)

  beachBar BeachBar @relation(fields: [beachBarId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  // @@map("user_favorite_bar")
  @@map("user_favorite_bar_view")
}

model UserHistory {
  id         BigInt              @id @default(autoincrement())
  activityId Int                 @map("activity_id")
  objectId   BigInt?             @map("object_id")
  userId     Int?                @map("user_id")
  ipAddr     String?             @map("ip_addr") @db.VarChar(20)
  timestamp  DateTime            @default(now()) @db.Timestamptz(6)
  activity   UserHistoryActivity @relation(fields: [activityId], references: [id], onUpdate: NoAction)
  user       User?               @relation(fields: [userId], references: [id], onUpdate: NoAction)

  @@map("user_history")
}

model UserHistoryActivity {
  id            Int           @id @default(autoincrement())
  name          String        @unique @db.VarChar(255)
  timestamp     DateTime      @default(now()) @db.Timestamptz(6)
  userHistories UserHistory[]

  @@map("user_history_activity")
}

model UserSearch {
  id           BigInt           @id @default(autoincrement())
  date         DateTime?        @db.Date
  adults       Int?             @db.SmallInt
  children     Int?             @db.SmallInt
  userId       Int?             @map("user_id")
  inputValueId BigInt           @map("input_value_id")
  timestamp    DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime         @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  sortId       Int?             @map("sort_id") @db.SmallInt
  sort         SearchSort?      @relation(fields: [sortId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user         User?            @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  inputValue   SearchInputValue @relation(fields: [inputValueId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  filters      SearchFilter[]   @relation("user_search_filter")

  @@map("user_search")
}

model UserSearchFilter {
  searchId BigInt @map("search_id")
  filterId Int    @map("filter_id")
  // search   UserSearch   @relation(fields: [searchId], references: [id], onDelete: Cascade, onUpdate: NoAction) @ignore
  // filter   SearchFilter @relation(fields: [filterId], references: [id], onDelete: Cascade, onUpdate: NoAction) @ignore

  @@id([searchId, filterId])
  @@map("user_search_filter")
  @@ignore
}

// -----------------------------------------
// Not released yet (Marketing - Analytics)
// -----------------------------------------
model Vote {
  id         BigInt         @id @default(autoincrement())
  feedbackId Int            @map("feedback_id")
  userId     Int?           @map("user_id")
  rating     String         @db.Char(1)
  timestamp  DateTime       @default(now()) @db.Timestamptz(6)
  feedback   VotingFeedback @relation(fields: [feedbackId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user       User?          @relation(fields: [userId], references: [id], onUpdate: NoAction)

  @@map("vote")
}

model VotingFeedback {
  id           Int           @id(map: "vote_category_pkey") @default(autoincrement())
  title        String        @db.VarChar(255)
  description  String
  refCode      String        @unique(map: "vote_category_ref_code_key") @map("ref_code") @db.VarChar(4)
  timestamp    DateTime      @default(now()) @db.Timestamptz(6)
  deletedAt    DateTime?     @map("deleted_at") @db.Timestamptz(6)
  votes        Vote[]
  votingResult VotingResult?

  @@map("voting_feedback")
}

model VotingResult {
  id         Int            @id(map: "vote_tag_pkey") @default(autoincrement())
  feedbackId Int            @unique(map: "vote_tag_category_id_key") @map("feedback_id")
  upvotes    Int?           @default(0)
  downvotes  Int?           @default(0)
  totalVotes Int?           @map("total_votes")
  feedback   VotingFeedback @relation(fields: [feedbackId], references: [id], onUpdate: NoAction)

  @@map("voting_result")
}

enum CardFunding {
  credit
  debit
  prepaid
  unknown

  @@map("card_funding")
}

enum CardType {
  physical
  virtual
  unknown

  @@map("card_type")
}

enum LoginDetailsStatus {
  LOGGED_IN         @map("logged_in")
  INVALID_PASSWORD  @map("invalid_password")
  FAILED            @map("failed")

  @@map("login_details_status")
}

enum PersonHonorificTitle {
  Mr
  Mrs
  Ms
  Miss
  Sr
  Dr
  Lady

  @@map("person_honorific_title")
}
